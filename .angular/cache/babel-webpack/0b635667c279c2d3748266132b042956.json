{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, forwardRef } from '@angular/core';\nimport { FormGroup } from '../model';\nimport { composeAsyncValidators, composeValidators, NG_ASYNC_VALIDATORS, NG_VALIDATORS } from '../validators';\nimport { ControlContainer } from './control_container';\nimport { removeListItem, setUpControl, setUpFormContainer, syncPendingControls } from './shared';\nimport * as i0 from \"@angular/core\";\nexport const formDirectiveProvider = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgForm)\n};\n\nconst resolvedPromise = (() => Promise.resolve(null))();\n/**\n * @description\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You optionally export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * gives you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, use `NgModel` with a `name`\n * attribute. You may use `NgModelGroup` to create sub-groups within the form.\n *\n * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event emits the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * To import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * @usageNotes\n *\n * ### Listening for form submission\n *\n * The following example shows how to capture the form values from the \"ngSubmit\" event.\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Setting the update options\n *\n * The following example shows you how to change the \"updateOn\" option from its default using\n * ngFormOptions.\n *\n * ```html\n * <form [ngFormOptions]=\"{updateOn: 'blur'}\">\n *    <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n * </form>\n * ```\n *\n * ### Native DOM validation UI\n *\n * In order to prevent the native DOM form validation UI from interfering with Angular's form\n * validation, Angular automatically adds the `novalidate` attribute on any `<form>` whenever\n * `FormModule` or `ReactiveFormModule` are imported into the application.\n * If you want to explicitly enable native DOM validation UI with Angular forms, you can add the\n * `ngNativeValidate` attribute to the `<form>` element:\n *\n * ```html\n * <form ngNativeValidate>\n *   ...\n * </form>\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\n\n\nexport class NgForm extends ControlContainer {\n  constructor(validators, asyncValidators) {\n    super();\n    /**\n     * @description\n     * Returns whether the form submission has been triggered.\n     */\n\n    this.submitted = false;\n    this._directives = [];\n    /**\n     * @description\n     * Event emitter for the \"ngSubmit\" event\n     */\n\n    this.ngSubmit = new EventEmitter();\n    this.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n  }\n  /** @nodoc */\n\n\n  ngAfterViewInit() {\n    this._setUpdateStrategy();\n  }\n  /**\n   * @description\n   * The directive instance.\n   */\n\n\n  get formDirective() {\n    return this;\n  }\n  /**\n   * @description\n   * The internal `FormGroup` instance.\n   */\n\n\n  get control() {\n    return this.form;\n  }\n  /**\n   * @description\n   * Returns an array representing the path to this group. Because this directive\n   * always lives at the top level of a form, it is always an empty array.\n   */\n\n\n  get path() {\n    return [];\n  }\n  /**\n   * @description\n   * Returns a map of the controls in this group.\n   */\n\n\n  get controls() {\n    return this.form.controls;\n  }\n  /**\n   * @description\n   * Method that sets up the control directive in this group, re-calculates its value\n   * and validity, and adds the instance to the internal list of directives.\n   *\n   * @param dir The `NgModel` directive instance.\n   */\n\n\n  addControl(dir) {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n\n      dir.control = container.registerControl(dir.name, dir.control);\n      setUpControl(dir.control, dir);\n      dir.control.updateValueAndValidity({\n        emitEvent: false\n      });\n\n      this._directives.push(dir);\n    });\n  }\n  /**\n   * @description\n   * Retrieves the `FormControl` instance from the provided `NgModel` directive.\n   *\n   * @param dir The `NgModel` directive instance.\n   */\n\n\n  getControl(dir) {\n    return this.form.get(dir.path);\n  }\n  /**\n   * @description\n   * Removes the `NgModel` instance from the internal list of directives\n   *\n   * @param dir The `NgModel` directive instance.\n   */\n\n\n  removeControl(dir) {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n\n      if (container) {\n        container.removeControl(dir.name);\n      }\n\n      removeListItem(this._directives, dir);\n    });\n  }\n  /**\n   * @description\n   * Adds a new `NgModelGroup` directive instance to the form.\n   *\n   * @param dir The `NgModelGroup` directive instance.\n   */\n\n\n  addFormGroup(dir) {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n\n      const group = new FormGroup({});\n      setUpFormContainer(group, dir);\n      container.registerControl(dir.name, group);\n      group.updateValueAndValidity({\n        emitEvent: false\n      });\n    });\n  }\n  /**\n   * @description\n   * Removes the `NgModelGroup` directive instance from the form.\n   *\n   * @param dir The `NgModelGroup` directive instance.\n   */\n\n\n  removeFormGroup(dir) {\n    resolvedPromise.then(() => {\n      const container = this._findContainer(dir.path);\n\n      if (container) {\n        container.removeControl(dir.name);\n      }\n    });\n  }\n  /**\n   * @description\n   * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance\n   *\n   * @param dir The `NgModelGroup` directive instance.\n   */\n\n\n  getFormGroup(dir) {\n    return this.form.get(dir.path);\n  }\n  /**\n   * Sets the new value for the provided `NgControl` directive.\n   *\n   * @param dir The `NgControl` directive instance.\n   * @param value The new value for the directive's control.\n   */\n\n\n  updateModel(dir, value) {\n    resolvedPromise.then(() => {\n      const ctrl = this.form.get(dir.path);\n      ctrl.setValue(value);\n    });\n  }\n  /**\n   * @description\n   * Sets the value for this `FormGroup`.\n   *\n   * @param value The new value\n   */\n\n\n  setValue(value) {\n    this.control.setValue(value);\n  }\n  /**\n   * @description\n   * Method called when the \"submit\" event is triggered on the form.\n   * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n   *\n   * @param $event The \"submit\" event object\n   */\n\n\n  onSubmit($event) {\n    this.submitted = true;\n    syncPendingControls(this.form, this._directives);\n    this.ngSubmit.emit($event);\n    return false;\n  }\n  /**\n   * @description\n   * Method called when the \"reset\" event is triggered on the form.\n   */\n\n\n  onReset() {\n    this.resetForm();\n  }\n  /**\n   * @description\n   * Resets the form to an initial value and resets its submitted status.\n   *\n   * @param value The new value for the form.\n   */\n\n\n  resetForm(value = undefined) {\n    this.form.reset(value);\n    this.submitted = false;\n  }\n\n  _setUpdateStrategy() {\n    if (this.options && this.options.updateOn != null) {\n      this.form._updateOn = this.options.updateOn;\n    }\n  }\n  /** @internal */\n\n\n  _findContainer(path) {\n    path.pop();\n    return path.length ? this.form.get(path) : this.form;\n  }\n\n}\n\nNgForm.ɵfac = function NgForm_Factory(t) {\n  return new (t || NgForm)(i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10));\n};\n\nNgForm.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: NgForm,\n  selectors: [[\"form\", 3, \"ngNoForm\", \"\", 3, \"formGroup\", \"\"], [\"ng-form\"], [\"\", \"ngForm\", \"\"]],\n  hostBindings: function NgForm_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"submit\", function NgForm_submit_HostBindingHandler($event) {\n        return ctx.onSubmit($event);\n      })(\"reset\", function NgForm_reset_HostBindingHandler() {\n        return ctx.onReset();\n      });\n    }\n  },\n  inputs: {\n    options: [\"ngFormOptions\", \"options\"]\n  },\n  outputs: {\n    ngSubmit: \"ngSubmit\"\n  },\n  exportAs: [\"ngForm\"],\n  features: [i0.ɵɵProvidersFeature([formDirectiveProvider]), i0.ɵɵInheritDefinitionFeature]\n});","map":{"version":3,"sources":["/home/nig/angular-typed-forms-ex-nwhadc/src/forms/src/directives/ng_form.ts"],"names":["EventEmitter","forwardRef","FormGroup","composeAsyncValidators","composeValidators","NG_ASYNC_VALIDATORS","NG_VALIDATORS","ControlContainer","removeListItem","setUpControl","setUpFormContainer","syncPendingControls","i0","formDirectiveProvider","provide","useExisting","NgForm","resolvedPromise","Promise","resolve","constructor","validators","asyncValidators","submitted","_directives","ngSubmit","form","ngAfterViewInit","_setUpdateStrategy","formDirective","control","path","controls","addControl","dir","then","container","_findContainer","registerControl","name","updateValueAndValidity","emitEvent","push","getControl","get","removeControl","addFormGroup","group","removeFormGroup","getFormGroup","updateModel","value","ctrl","setValue","onSubmit","$event","emit","onReset","resetForm","undefined","reset","options","updateOn","_updateOn","pop","length","ɵfac","NgForm_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","hostBindings","NgForm_HostBindings","rf","ctx","ɵɵlistener","NgForm_submit_HostBindingHandler","NgForm_reset_HostBindingHandler","inputs","outputs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, forwardRef } from '@angular/core';\nimport { FormGroup } from '../model';\nimport { composeAsyncValidators, composeValidators, NG_ASYNC_VALIDATORS, NG_VALIDATORS } from '../validators';\nimport { ControlContainer } from './control_container';\nimport { removeListItem, setUpControl, setUpFormContainer, syncPendingControls } from './shared';\nimport * as i0 from \"@angular/core\";\nexport const formDirectiveProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => NgForm)\n};\nconst resolvedPromise = (() => Promise.resolve(null))();\n/**\n * @description\n * Creates a top-level `FormGroup` instance and binds it to a form\n * to track aggregate form value and validation status.\n *\n * As soon as you import the `FormsModule`, this directive becomes active by default on\n * all `<form>` tags.  You don't need to add a special selector.\n *\n * You optionally export the directive into a local template variable using `ngForm` as the key\n * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n * `FormGroup` instance are duplicated on the directive itself, so a reference to it\n * gives you access to the aggregate value and validity status of the form, as well as\n * user interaction properties like `dirty` and `touched`.\n *\n * To register child controls with the form, use `NgModel` with a `name`\n * attribute. You may use `NgModelGroup` to create sub-groups within the form.\n *\n * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has\n * triggered a form submission. The `ngSubmit` event emits the original form\n * submission event.\n *\n * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.\n * To import the `FormsModule` but skip its usage in some forms,\n * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`\n * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is\n * unnecessary because the `<form>` tags are inert. In that case, you would\n * refrain from using the `formGroup` directive.\n *\n * @usageNotes\n *\n * ### Listening for form submission\n *\n * The following example shows how to capture the form values from the \"ngSubmit\" event.\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Setting the update options\n *\n * The following example shows you how to change the \"updateOn\" option from its default using\n * ngFormOptions.\n *\n * ```html\n * <form [ngFormOptions]=\"{updateOn: 'blur'}\">\n *    <input name=\"one\" ngModel>  <!-- this ngModel will update on blur -->\n * </form>\n * ```\n *\n * ### Native DOM validation UI\n *\n * In order to prevent the native DOM form validation UI from interfering with Angular's form\n * validation, Angular automatically adds the `novalidate` attribute on any `<form>` whenever\n * `FormModule` or `ReactiveFormModule` are imported into the application.\n * If you want to explicitly enable native DOM validation UI with Angular forms, you can add the\n * `ngNativeValidate` attribute to the `<form>` element:\n *\n * ```html\n * <form ngNativeValidate>\n *   ...\n * </form>\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\nexport class NgForm extends ControlContainer {\n    constructor(validators, asyncValidators) {\n        super();\n        /**\n         * @description\n         * Returns whether the form submission has been triggered.\n         */\n        this.submitted = false;\n        this._directives = [];\n        /**\n         * @description\n         * Event emitter for the \"ngSubmit\" event\n         */\n        this.ngSubmit = new EventEmitter();\n        this.form =\n            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n    }\n    /** @nodoc */\n    ngAfterViewInit() {\n        this._setUpdateStrategy();\n    }\n    /**\n     * @description\n     * The directive instance.\n     */\n    get formDirective() {\n        return this;\n    }\n    /**\n     * @description\n     * The internal `FormGroup` instance.\n     */\n    get control() {\n        return this.form;\n    }\n    /**\n     * @description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it is always an empty array.\n     */\n    get path() {\n        return [];\n    }\n    /**\n     * @description\n     * Returns a map of the controls in this group.\n     */\n    get controls() {\n        return this.form.controls;\n    }\n    /**\n     * @description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    addControl(dir) {\n        resolvedPromise.then(() => {\n            const container = this._findContainer(dir.path);\n            dir.control =\n                container.registerControl(dir.name, dir.control);\n            setUpControl(dir.control, dir);\n            dir.control.updateValueAndValidity({ emitEvent: false });\n            this._directives.push(dir);\n        });\n    }\n    /**\n     * @description\n     * Retrieves the `FormControl` instance from the provided `NgModel` directive.\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    getControl(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * @description\n     * Removes the `NgModel` instance from the internal list of directives\n     *\n     * @param dir The `NgModel` directive instance.\n     */\n    removeControl(dir) {\n        resolvedPromise.then(() => {\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n            removeListItem(this._directives, dir);\n        });\n    }\n    /**\n     * @description\n     * Adds a new `NgModelGroup` directive instance to the form.\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    addFormGroup(dir) {\n        resolvedPromise.then(() => {\n            const container = this._findContainer(dir.path);\n            const group = new FormGroup({});\n            setUpFormContainer(group, dir);\n            container.registerControl(dir.name, group);\n            group.updateValueAndValidity({ emitEvent: false });\n        });\n    }\n    /**\n     * @description\n     * Removes the `NgModelGroup` directive instance from the form.\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    removeFormGroup(dir) {\n        resolvedPromise.then(() => {\n            const container = this._findContainer(dir.path);\n            if (container) {\n                container.removeControl(dir.name);\n            }\n        });\n    }\n    /**\n     * @description\n     * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance\n     *\n     * @param dir The `NgModelGroup` directive instance.\n     */\n    getFormGroup(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * Sets the new value for the provided `NgControl` directive.\n     *\n     * @param dir The `NgControl` directive instance.\n     * @param value The new value for the directive's control.\n     */\n    updateModel(dir, value) {\n        resolvedPromise.then(() => {\n            const ctrl = this.form.get(dir.path);\n            ctrl.setValue(value);\n        });\n    }\n    /**\n     * @description\n     * Sets the value for this `FormGroup`.\n     *\n     * @param value The new value\n     */\n    setValue(value) {\n        this.control.setValue(value);\n    }\n    /**\n     * @description\n     * Method called when the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param $event The \"submit\" event object\n     */\n    onSubmit($event) {\n        this.submitted = true;\n        syncPendingControls(this.form, this._directives);\n        this.ngSubmit.emit($event);\n        return false;\n    }\n    /**\n     * @description\n     * Method called when the \"reset\" event is triggered on the form.\n     */\n    onReset() {\n        this.resetForm();\n    }\n    /**\n     * @description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param value The new value for the form.\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        this.submitted = false;\n    }\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.form._updateOn = this.options.updateOn;\n        }\n    }\n    /** @internal */\n    _findContainer(path) {\n        path.pop();\n        return path.length ? this.form.get(path) : this.form;\n    }\n}\nNgForm.ɵfac = function NgForm_Factory(t) { return new (t || NgForm)(i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10)); };\nNgForm.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: NgForm, selectors: [[\"form\", 3, \"ngNoForm\", \"\", 3, \"formGroup\", \"\"], [\"ng-form\"], [\"\", \"ngForm\", \"\"]], hostBindings: function NgForm_HostBindings(rf, ctx) { if (rf & 1) {\n        i0.ɵɵlistener(\"submit\", function NgForm_submit_HostBindingHandler($event) { return ctx.onSubmit($event); })(\"reset\", function NgForm_reset_HostBindingHandler() { return ctx.onReset(); });\n    } }, inputs: { options: [\"ngFormOptions\", \"options\"] }, outputs: { ngSubmit: \"ngSubmit\" }, exportAs: [\"ngForm\"], features: [i0.ɵɵProvidersFeature([formDirectiveProvider]), i0.ɵɵInheritDefinitionFeature] });\n"]},"metadata":{},"sourceType":"module"}