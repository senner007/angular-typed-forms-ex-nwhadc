{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { forwardRef } from '@angular/core';\nimport { NG_ASYNC_VALIDATORS, NG_VALIDATORS } from '../../validators';\nimport { AbstractFormGroupDirective } from '../abstract_form_group_directive';\nimport { ControlContainer } from '../control_container';\nimport { arrayParentException, groupParentException } from '../reactive_errors';\nimport { controlPath } from '../shared';\nimport { FormGroupDirective } from './form_group_directive';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../control_container\";\nconst ngDevMode = true;\nexport const formGroupNameProvider = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupName)\n};\n/**\n * @description\n *\n * Syncs a nested `FormGroup` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective`.\n *\n * It accepts the string name of the nested `FormGroup` to link, and\n * looks for a `FormGroup` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Use nested form groups to validate a sub-group of a\n * form separately from the rest or to group the values of certain\n * controls into their own nested object.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * @usageNotes\n *\n * ### Access the group by name\n *\n * The following example uses the AbstractControl `get` method to access the\n * associated `FormGroup`\n *\n * ```ts\n *   this.form.get('name');\n * ```\n *\n * ### Access individual controls in the group\n *\n * The following example uses the AbstractControl `get` method to access\n * individual controls within the group using dot syntax.\n *\n * ```ts\n *   this.form.get('name.first');\n * ```\n *\n * ### Register a nested `FormGroup`.\n *\n * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,\n * and provides methods to retrieve the nested `FormGroup` and individual controls.\n *\n * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n\nexport class FormGroupName extends AbstractFormGroupDirective {\n  constructor(parent, validators, asyncValidators) {\n    super();\n    this._parent = parent;\n\n    this._setValidators(validators);\n\n    this._setAsyncValidators(asyncValidators);\n  }\n  /** @internal */\n\n\n  _checkParentType() {\n    if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw groupParentException();\n    }\n  }\n\n}\n\nFormGroupName.ɵfac = function FormGroupName_Factory(t) {\n  return new (t || FormGroupName)(i0.ɵɵdirectiveInject(i1.ControlContainer, 13), i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10));\n};\n\nFormGroupName.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: FormGroupName,\n  selectors: [[\"\", \"formGroupName\", \"\"]],\n  inputs: {\n    name: [\"formGroupName\", \"name\"]\n  },\n  features: [i0.ɵɵProvidersFeature([formGroupNameProvider]), i0.ɵɵInheritDefinitionFeature]\n});\nexport const formArrayNameProvider = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormArrayName)\n};\n/**\n * @description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n\nexport class FormArrayName extends ControlContainer {\n  constructor(parent, validators, asyncValidators) {\n    super();\n    this._parent = parent;\n\n    this._setValidators(validators);\n\n    this._setAsyncValidators(asyncValidators);\n  }\n  /**\n   * A lifecycle method called when the directive's inputs are initialized. For internal use only.\n   * @throws If the directive does not have a valid parent.\n   * @nodoc\n   */\n\n\n  ngOnInit() {\n    this._checkParentType();\n\n    this.formDirective.addFormArray(this);\n  }\n  /**\n   * A lifecycle method called before the directive's instance is destroyed. For internal use only.\n   * @nodoc\n   */\n\n\n  ngOnDestroy() {\n    if (this.formDirective) {\n      this.formDirective.removeFormArray(this);\n    }\n  }\n  /**\n   * @description\n   * The `FormArray` bound to this directive.\n   */\n\n\n  get control() {\n    return this.formDirective.getFormArray(this);\n  }\n  /**\n   * @description\n   * The top-level directive for this group if present, otherwise null.\n   */\n\n\n  get formDirective() {\n    return this._parent ? this._parent.formDirective : null;\n  }\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n\n\n  get path() {\n    return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n  }\n\n  _checkParentType() {\n    if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw arrayParentException();\n    }\n  }\n\n}\n\nFormArrayName.ɵfac = function FormArrayName_Factory(t) {\n  return new (t || FormArrayName)(i0.ɵɵdirectiveInject(i1.ControlContainer, 13), i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10));\n};\n\nFormArrayName.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: FormArrayName,\n  selectors: [[\"\", \"formArrayName\", \"\"]],\n  inputs: {\n    name: [\"formArrayName\", \"name\"]\n  },\n  features: [i0.ɵɵProvidersFeature([formArrayNameProvider]), i0.ɵɵInheritDefinitionFeature]\n});\n\nfunction _hasInvalidParent(parent) {\n  return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName);\n}","map":{"version":3,"sources":["/home/nig/angular-typed-forms-ex-nwhadc/src/forms/src/directives/reactive_directives/form_group_name.ts"],"names":["forwardRef","NG_ASYNC_VALIDATORS","NG_VALIDATORS","AbstractFormGroupDirective","ControlContainer","arrayParentException","groupParentException","controlPath","FormGroupDirective","i0","i1","ngDevMode","formGroupNameProvider","provide","useExisting","FormGroupName","constructor","parent","validators","asyncValidators","_parent","_setValidators","_setAsyncValidators","_checkParentType","_hasInvalidParent","ɵfac","FormGroupName_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","inputs","name","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","formArrayNameProvider","FormArrayName","ngOnInit","formDirective","addFormArray","ngOnDestroy","removeFormArray","control","getFormArray","path","toString","FormArrayName_Factory"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { forwardRef, } from '@angular/core';\nimport { NG_ASYNC_VALIDATORS, NG_VALIDATORS } from '../../validators';\nimport { AbstractFormGroupDirective } from '../abstract_form_group_directive';\nimport { ControlContainer } from '../control_container';\nimport { arrayParentException, groupParentException } from '../reactive_errors';\nimport { controlPath } from '../shared';\nimport { FormGroupDirective } from './form_group_directive';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../control_container\";\nconst ngDevMode = true;\nexport const formGroupNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormGroupName),\n};\n/**\n * @description\n *\n * Syncs a nested `FormGroup` to a DOM element.\n *\n * This directive can only be used with a parent `FormGroupDirective`.\n *\n * It accepts the string name of the nested `FormGroup` to link, and\n * looks for a `FormGroup` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * Use nested form groups to validate a sub-group of a\n * form separately from the rest or to group the values of certain\n * controls into their own nested object.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n *\n * @usageNotes\n *\n * ### Access the group by name\n *\n * The following example uses the AbstractControl `get` method to access the\n * associated `FormGroup`\n *\n * ```ts\n *   this.form.get('name');\n * ```\n *\n * ### Access individual controls in the group\n *\n * The following example uses the AbstractControl `get` method to access\n * individual controls within the group using dot syntax.\n *\n * ```ts\n *   this.form.get('name.first');\n * ```\n *\n * ### Register a nested `FormGroup`.\n *\n * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,\n * and provides methods to retrieve the nested `FormGroup` and individual controls.\n *\n * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nexport class FormGroupName extends AbstractFormGroupDirective {\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /** @internal */\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw groupParentException();\n        }\n    }\n}\nFormGroupName.ɵfac = function FormGroupName_Factory(t) { return new (t || FormGroupName)(i0.ɵɵdirectiveInject(i1.ControlContainer, 13), i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10)); };\nFormGroupName.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: FormGroupName, selectors: [[\"\", \"formGroupName\", \"\"]], inputs: { name: [\"formGroupName\", \"name\"] }, features: [i0.ɵɵProvidersFeature([formGroupNameProvider]), i0.ɵɵInheritDefinitionFeature] });\nexport const formArrayNameProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormArrayName),\n};\n/**\n * @description\n *\n * Syncs a nested `FormArray` to a DOM element.\n *\n * This directive is designed to be used with a parent `FormGroupDirective` (selector:\n * `[formGroup]`).\n *\n * It accepts the string name of the nested `FormArray` you want to link, and\n * will look for a `FormArray` registered with that name in the parent\n * `FormGroup` instance you passed into `FormGroupDirective`.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nexport class FormArrayName extends ControlContainer {\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /**\n     * A lifecycle method called when the directive's inputs are initialized. For internal use only.\n     * @throws If the directive does not have a valid parent.\n     * @nodoc\n     */\n    ngOnInit() {\n        this._checkParentType();\n        this.formDirective.addFormArray(this);\n    }\n    /**\n     * A lifecycle method called before the directive's instance is destroyed. For internal use only.\n     * @nodoc\n     */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeFormArray(this);\n        }\n    }\n    /**\n     * @description\n     * The `FormArray` bound to this directive.\n     */\n    get control() {\n        return this.formDirective.getFormArray(this);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    _checkParentType() {\n        if (_hasInvalidParent(this._parent) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw arrayParentException();\n        }\n    }\n}\nFormArrayName.ɵfac = function FormArrayName_Factory(t) { return new (t || FormArrayName)(i0.ɵɵdirectiveInject(i1.ControlContainer, 13), i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10)); };\nFormArrayName.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: FormArrayName, selectors: [[\"\", \"formArrayName\", \"\"]], inputs: { name: [\"formArrayName\", \"name\"] }, features: [i0.ɵɵProvidersFeature([formArrayNameProvider]), i0.ɵɵInheritDefinitionFeature] });\nfunction _hasInvalidParent(parent) {\n    return (!(parent instanceof FormGroupName) &&\n        !(parent instanceof FormGroupDirective) &&\n        !(parent instanceof FormArrayName));\n}\n"]},"metadata":{},"sourceType":"module"}