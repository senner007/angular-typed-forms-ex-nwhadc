{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, forwardRef, InjectionToken } from '@angular/core';\nimport { NG_ASYNC_VALIDATORS, NG_VALIDATORS } from '../../validators';\nimport { NG_VALUE_ACCESSOR } from '../control_value_accessor';\nimport { NgControl } from '../ng_control';\nimport { disabledAttrWarning } from '../reactive_errors';\nimport { _ngModelWarning, cleanUpControl, isPropertyUpdated, selectValueAccessor, setUpControl } from '../shared';\nimport * as i0 from \"@angular/core\";\nconst ngDevMode = true;\n/**\n * Token to provide to turn off the ngModel warning on formControl and formControlName.\n */\n\nexport const NG_MODEL_WITH_FORM_CONTROL_WARNING = new InjectionToken('NgModelWithFormControlWarning');\nexport const formControlBinding = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlDirective)\n};\n/**\n * @description\n * Synchronizes a standalone `FormControl` instance to a form control element.\n *\n * Note that support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives was deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * @usageNotes\n *\n * The following example shows how to register a standalone control and set its value.\n *\n * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n\nexport class FormControlDirective extends NgControl {\n  constructor(validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n    super();\n    this._ngModelWarningConfig = _ngModelWarningConfig;\n    /** @deprecated as of v6 */\n\n    this.update = new EventEmitter();\n    /**\n     * @description\n     * Instance property used to track whether an ngModel warning has been sent out for this\n     * particular `FormControlDirective` instance. Used to support warning config of \"always\".\n     *\n     * @internal\n     */\n\n    this._ngModelWarningSent = false;\n\n    this._setValidators(validators);\n\n    this._setAsyncValidators(asyncValidators);\n\n    this.valueAccessor = selectValueAccessor(this, valueAccessors);\n  }\n  /**\n   * @description\n   * Triggers a warning in dev mode that this input should not be used with reactive forms.\n   */\n\n\n  set isDisabled(isDisabled) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      console.warn(disabledAttrWarning);\n    }\n  }\n  /** @nodoc */\n\n\n  ngOnChanges(changes) {\n    if (this._isControlChanged(changes)) {\n      const previousForm = changes['form'].previousValue;\n\n      if (previousForm) {\n        cleanUpControl(previousForm, this,\n        /* validateControlPresenceOnChange */\n        false);\n      }\n\n      setUpControl(this.form, this);\n\n      if (this.control.disabled && this.valueAccessor.setDisabledState) {\n        this.valueAccessor.setDisabledState(true);\n      }\n\n      this.form.updateValueAndValidity({\n        emitEvent: false\n      });\n    }\n\n    if (isPropertyUpdated(changes, this.viewModel)) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);\n      }\n\n      this.form.setValue(this.model);\n      this.viewModel = this.model;\n    }\n  }\n  /** @nodoc */\n\n\n  ngOnDestroy() {\n    if (this.form) {\n      cleanUpControl(this.form, this,\n      /* validateControlPresenceOnChange */\n      false);\n    }\n  }\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n\n\n  get path() {\n    return [];\n  }\n  /**\n   * @description\n   * The `FormControl` bound to this directive.\n   */\n\n\n  get control() {\n    return this.form;\n  }\n  /**\n   * @description\n   * Sets the new value for the view model and emits an `ngModelChange` event.\n   *\n   * @param newValue The new value for the view model.\n   */\n\n\n  viewToModelUpdate(newValue) {\n    this.viewModel = newValue;\n    this.update.emit(newValue);\n  }\n\n  _isControlChanged(changes) {\n    return changes.hasOwnProperty('form');\n  }\n\n}\n/**\n * @description\n * Static property used to track whether any ngModel warnings have been sent across\n * all instances of FormControlDirective. Used to support warning config of \"once\".\n *\n * @internal\n */\n\nFormControlDirective._ngModelWarningSentOnce = false;\n\nFormControlDirective.ɵfac = function FormControlDirective_Factory(t) {\n  return new (t || FormControlDirective)(i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10), i0.ɵɵdirectiveInject(NG_MODEL_WITH_FORM_CONTROL_WARNING, 8));\n};\n\nFormControlDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: FormControlDirective,\n  selectors: [[\"\", \"formControl\", \"\"]],\n  inputs: {\n    form: [\"formControl\", \"form\"],\n    isDisabled: [\"disabled\", \"isDisabled\"],\n    model: [\"ngModel\", \"model\"]\n  },\n  outputs: {\n    update: \"ngModelChange\"\n  },\n  exportAs: [\"ngForm\"],\n  features: [i0.ɵɵProvidersFeature([formControlBinding]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n});","map":{"version":3,"sources":["/home/nig/angular-typed-forms-ex-nwhadc/src/forms/src/directives/reactive_directives/form_control_directive.ts"],"names":["EventEmitter","forwardRef","InjectionToken","NG_ASYNC_VALIDATORS","NG_VALIDATORS","NG_VALUE_ACCESSOR","NgControl","disabledAttrWarning","_ngModelWarning","cleanUpControl","isPropertyUpdated","selectValueAccessor","setUpControl","i0","ngDevMode","NG_MODEL_WITH_FORM_CONTROL_WARNING","formControlBinding","provide","useExisting","FormControlDirective","constructor","validators","asyncValidators","valueAccessors","_ngModelWarningConfig","update","_ngModelWarningSent","_setValidators","_setAsyncValidators","valueAccessor","isDisabled","console","warn","ngOnChanges","changes","_isControlChanged","previousForm","previousValue","form","control","disabled","setDisabledState","updateValueAndValidity","emitEvent","viewModel","setValue","model","ngOnDestroy","path","viewToModelUpdate","newValue","emit","hasOwnProperty","_ngModelWarningSentOnce","ɵfac","FormControlDirective_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","inputs","outputs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,UAAvB,EAAmCC,cAAnC,QAA0D,eAA1D;AACA,SAASC,mBAAT,EAA8BC,aAA9B,QAAmD,kBAAnD;AACA,SAASC,iBAAT,QAAmC,2BAAnC;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,eAAT,EAA0BC,cAA1B,EAA0CC,iBAA1C,EAA6DC,mBAA7D,EAAkFC,YAAlF,QAAuG,WAAvG;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,MAAMC,SAAS,GAAG,IAAlB;AACA;AACA;AACA;;AACA,OAAO,MAAMC,kCAAkC,GAAG,IAAIb,cAAJ,CAAmB,+BAAnB,CAA3C;AACP,OAAO,MAAMc,kBAAkB,GAAG;AAC9BC,EAAAA,OAAO,EAAEX,SADqB;AAE9BY,EAAAA,WAAW,EAAEjB,UAAU,CAAC,MAAMkB,oBAAP;AAFO,CAA3B;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMA,oBAAN,SAAmCb,SAAnC,CAA6C;AAChDc,EAAAA,WAAW,CAACC,UAAD,EAAaC,eAAb,EAA8BC,cAA9B,EAA8CC,qBAA9C,EAAqE;AAC5E;AACA,SAAKA,qBAAL,GAA6BA,qBAA7B;AACA;;AACA,SAAKC,MAAL,GAAc,IAAIzB,YAAJ,EAAd;AACA;AACR;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAK0B,mBAAL,GAA2B,KAA3B;;AACA,SAAKC,cAAL,CAAoBN,UAApB;;AACA,SAAKO,mBAAL,CAAyBN,eAAzB;;AACA,SAAKO,aAAL,GAAqBlB,mBAAmB,CAAC,IAAD,EAAOY,cAAP,CAAxC;AACH;AACD;AACJ;AACA;AACA;;;AACkB,MAAVO,UAAU,CAACA,UAAD,EAAa;AACvB,QAAI,OAAOhB,SAAP,KAAqB,WAArB,IAAoCA,SAAxC,EAAmD;AAC/CiB,MAAAA,OAAO,CAACC,IAAR,CAAazB,mBAAb;AACH;AACJ;AACD;;;AACA0B,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,QAAI,KAAKC,iBAAL,CAAuBD,OAAvB,CAAJ,EAAqC;AACjC,YAAME,YAAY,GAAGF,OAAO,CAAC,MAAD,CAAP,CAAgBG,aAArC;;AACA,UAAID,YAAJ,EAAkB;AACd3B,QAAAA,cAAc,CAAC2B,YAAD,EAAe,IAAf;AACd;AAAsC,aADxB,CAAd;AAEH;;AACDxB,MAAAA,YAAY,CAAC,KAAK0B,IAAN,EAAY,IAAZ,CAAZ;;AACA,UAAI,KAAKC,OAAL,CAAaC,QAAb,IAAyB,KAAKX,aAAL,CAAmBY,gBAAhD,EAAkE;AAC9D,aAAKZ,aAAL,CAAmBY,gBAAnB,CAAoC,IAApC;AACH;;AACD,WAAKH,IAAL,CAAUI,sBAAV,CAAiC;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAjC;AACH;;AACD,QAAIjC,iBAAiB,CAACwB,OAAD,EAAU,KAAKU,SAAf,CAArB,EAAgD;AAC5C,UAAI,OAAO9B,SAAP,KAAqB,WAArB,IAAoCA,SAAxC,EAAmD;AAC/CN,QAAAA,eAAe,CAAC,aAAD,EAAgBW,oBAAhB,EAAsC,IAAtC,EAA4C,KAAKK,qBAAjD,CAAf;AACH;;AACD,WAAKc,IAAL,CAAUO,QAAV,CAAmB,KAAKC,KAAxB;AACA,WAAKF,SAAL,GAAiB,KAAKE,KAAtB;AACH;AACJ;AACD;;;AACAC,EAAAA,WAAW,GAAG;AACV,QAAI,KAAKT,IAAT,EAAe;AACX7B,MAAAA,cAAc,CAAC,KAAK6B,IAAN,EAAY,IAAZ;AACd;AAAsC,WADxB,CAAd;AAEH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;AACY,MAAJU,IAAI,GAAG;AACP,WAAO,EAAP;AACH;AACD;AACJ;AACA;AACA;;;AACe,MAAPT,OAAO,GAAG;AACV,WAAO,KAAKD,IAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIW,EAAAA,iBAAiB,CAACC,QAAD,EAAW;AACxB,SAAKN,SAAL,GAAiBM,QAAjB;AACA,SAAKzB,MAAL,CAAY0B,IAAZ,CAAiBD,QAAjB;AACH;;AACDf,EAAAA,iBAAiB,CAACD,OAAD,EAAU;AACvB,WAAOA,OAAO,CAACkB,cAAR,CAAuB,MAAvB,CAAP;AACH;;AAnF+C;AAqFpD;AACA;AACA;AACA;AACA;AACA;AACA;;AACAjC,oBAAoB,CAACkC,uBAArB,GAA+C,KAA/C;;AACAlC,oBAAoB,CAACmC,IAArB,GAA4B,SAASC,4BAAT,CAAsCC,CAAtC,EAAyC;AAAE,SAAO,KAAKA,CAAC,IAAIrC,oBAAV,EAAgCN,EAAE,CAAC4C,iBAAH,CAAqBrD,aAArB,EAAoC,EAApC,CAAhC,EAAyES,EAAE,CAAC4C,iBAAH,CAAqBtD,mBAArB,EAA0C,EAA1C,CAAzE,EAAwHU,EAAE,CAAC4C,iBAAH,CAAqBpD,iBAArB,EAAwC,EAAxC,CAAxH,EAAqKQ,EAAE,CAAC4C,iBAAH,CAAqB1C,kCAArB,EAAyD,CAAzD,CAArK,CAAP;AAA2O,CAAlT;;AACAI,oBAAoB,CAACuC,IAArB,GAA4B,aAAc7C,EAAE,CAAC8C,iBAAH,CAAqB;AAAEC,EAAAA,IAAI,EAAEzC,oBAAR;AAA8B0C,EAAAA,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,aAAL,EAAoB,EAApB,CAAD,CAAzC;AAAoEC,EAAAA,MAAM,EAAE;AAAExB,IAAAA,IAAI,EAAE,CAAC,aAAD,EAAgB,MAAhB,CAAR;AAAiCR,IAAAA,UAAU,EAAE,CAAC,UAAD,EAAa,YAAb,CAA7C;AAAyEgB,IAAAA,KAAK,EAAE,CAAC,SAAD,EAAY,OAAZ;AAAhF,GAA5E;AAAoLiB,EAAAA,OAAO,EAAE;AAAEtC,IAAAA,MAAM,EAAE;AAAV,GAA7L;AAA0NuC,EAAAA,QAAQ,EAAE,CAAC,QAAD,CAApO;AAAgPC,EAAAA,QAAQ,EAAE,CAACpD,EAAE,CAACqD,kBAAH,CAAsB,CAAClD,kBAAD,CAAtB,CAAD,EAA8CH,EAAE,CAACsD,0BAAjD,EAA6EtD,EAAE,CAACuD,oBAAhF;AAA1P,CAArB,CAA1C","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, forwardRef, InjectionToken, } from '@angular/core';\nimport { NG_ASYNC_VALIDATORS, NG_VALIDATORS } from '../../validators';\nimport { NG_VALUE_ACCESSOR, } from '../control_value_accessor';\nimport { NgControl } from '../ng_control';\nimport { disabledAttrWarning } from '../reactive_errors';\nimport { _ngModelWarning, cleanUpControl, isPropertyUpdated, selectValueAccessor, setUpControl, } from '../shared';\nimport * as i0 from \"@angular/core\";\nconst ngDevMode = true;\n/**\n * Token to provide to turn off the ngModel warning on formControl and formControlName.\n */\nexport const NG_MODEL_WITH_FORM_CONTROL_WARNING = new InjectionToken('NgModelWithFormControlWarning');\nexport const formControlBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(() => FormControlDirective),\n};\n/**\n * @description\n * Synchronizes a standalone `FormControl` instance to a form control element.\n *\n * Note that support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives was deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * @usageNotes\n *\n * The following example shows how to register a standalone control and set its value.\n *\n * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nexport class FormControlDirective extends NgControl {\n    constructor(validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        /** @deprecated as of v6 */\n        this.update = new EventEmitter();\n        /**\n         * @description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular `FormControlDirective` instance. Used to support warning config of \"always\".\n         *\n         * @internal\n         */\n        this._ngModelWarningSent = false;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /**\n     * @description\n     * Triggers a warning in dev mode that this input should not be used with reactive forms.\n     */\n    set isDisabled(isDisabled) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            console.warn(disabledAttrWarning);\n        }\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        if (this._isControlChanged(changes)) {\n            const previousForm = changes['form'].previousValue;\n            if (previousForm) {\n                cleanUpControl(previousForm, this, \n                /* validateControlPresenceOnChange */ false);\n            }\n            setUpControl(this.form, this);\n            if (this.control.disabled && this.valueAccessor.setDisabledState) {\n                this.valueAccessor.setDisabledState(true);\n            }\n            this.form.updateValueAndValidity({ emitEvent: false });\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);\n            }\n            this.form.setValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this.form) {\n            cleanUpControl(this.form, this, \n            /* validateControlPresenceOnChange */ false);\n        }\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return [];\n    }\n    /**\n     * @description\n     * The `FormControl` bound to this directive.\n     */\n    get control() {\n        return this.form;\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value for the view model.\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    _isControlChanged(changes) {\n        return changes.hasOwnProperty('form');\n    }\n}\n/**\n * @description\n * Static property used to track whether any ngModel warnings have been sent across\n * all instances of FormControlDirective. Used to support warning config of \"once\".\n *\n * @internal\n */\nFormControlDirective._ngModelWarningSentOnce = false;\nFormControlDirective.ɵfac = function FormControlDirective_Factory(t) { return new (t || FormControlDirective)(i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10), i0.ɵɵdirectiveInject(NG_MODEL_WITH_FORM_CONTROL_WARNING, 8)); };\nFormControlDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: FormControlDirective, selectors: [[\"\", \"formControl\", \"\"]], inputs: { form: [\"formControl\", \"form\"], isDisabled: [\"disabled\", \"isDisabled\"], model: [\"ngModel\", \"model\"] }, outputs: { update: \"ngModelChange\" }, exportAs: [\"ngForm\"], features: [i0.ɵɵProvidersFeature([formControlBinding]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature] });\n"]},"metadata":{},"sourceType":"module"}