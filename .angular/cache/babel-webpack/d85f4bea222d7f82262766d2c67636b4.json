{"ast":null,"code":"import { ReactiveFormsModule } from './form_providers';\nimport { AbstractControl, FormArray, FormControl, FormGroup } from './model';\nimport * as i0 from \"@angular/core\";\n\nfunction isAbstractControlOptions(options) {\n  return options.asyncValidators !== undefined || options.validators !== undefined || options.updateOn !== undefined;\n}\n/**\n * @description\n * Creates an `AbstractControl` from a user-specified configuration.\n *\n * The `FormBuilder` provides syntactic sugar that shortens creating instances of a\n * `FormControl`, `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to\n * build complex forms.\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n * @publicApi\n */\n\n\nexport class FormBuilder {\n  group(cc, options = null) {\n    const controls = this._reduceControls(cc);\n\n    let validators = null;\n    let asyncValidators = null;\n    let updateOn = undefined;\n\n    if (options != null) {\n      if (isAbstractControlOptions(options)) {\n        // `options` are `AbstractControlOptions`\n        validators = options.validators != null ? options.validators : null;\n        asyncValidators = options.asyncValidators != null ? options.asyncValidators : null;\n        updateOn = options.updateOn != null ? options.updateOn : undefined;\n      } else {\n        // `options` are legacy form group options\n        validators = options['validator'] != null ? options['validator'] : null;\n        asyncValidators = options['asyncValidator'] != null ? options['asyncValidator'] : null;\n      }\n    }\n\n    return new FormGroup(controls, {\n      asyncValidators,\n      updateOn,\n      validators\n    });\n  }\n\n  control(formState, validatorOrOpts, asyncValidator) {\n    return new FormControl(formState, validatorOrOpts, asyncValidator);\n  }\n  /**\n   * Constructs a new `FormArray` from the given array of configurations,\n   * validators and options.\n   *\n   * TODO: Do we want to support providing default values to create non-nullable controls?\n   *\n   * @param cc An array of child controls or control configs. Each\n   * child control is given an index when it is registered.\n   *\n   * @param validatorOrOpts A synchronous validator function, or an array of\n   * such functions, or an `AbstractControlOptions` object that contains\n   * validation functions and a validation trigger.\n   *\n   * @param asyncValidator A single async validator or array of async validator\n   * functions.\n   */\n\n\n  array(cc, validatorOrOpts, asyncValidator) {\n    const controls = cc.map(c => this._createControl(c));\n    return new FormArray(controls, validatorOrOpts, asyncValidator);\n  }\n  /** @internal */\n\n\n  _reduceControls(cc) {\n    const controls = {};\n    Object.keys(cc).forEach(controlName => {\n      controls[controlName] = this._createControl(cc[controlName]);\n    });\n    return controls;\n  }\n  /** @internal */\n\n\n  _createControl(cc) {\n    if (cc instanceof FormControl) {\n      return cc;\n    } else if (cc instanceof AbstractControl) {\n      // A control; just return it\n      return cc;\n    } else if (Array.isArray(cc)) {\n      // ControlConfig Array\n      const value = cc[0];\n      const validator = cc.length > 1 ? cc[1] : null;\n      const asyncValidator = cc.length > 2 ? cc[2] : null;\n      return this.control(value, validator, asyncValidator);\n    } else {\n      // T or FormState<T>\n      return this.control(cc);\n    }\n  }\n\n}\n\nFormBuilder.ɵfac = function FormBuilder_Factory(t) {\n  return new (t || FormBuilder)();\n};\n\nFormBuilder.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FormBuilder,\n  factory: FormBuilder.ɵfac,\n  providedIn: ReactiveFormsModule\n});","map":{"version":3,"sources":["/home/nig/angular-typed-forms-ex-nwhadc/src/forms/src/form_builder.ts"],"names":["ReactiveFormsModule","AbstractControl","FormArray","FormControl","FormGroup","i0","isAbstractControlOptions","options","asyncValidators","undefined","validators","updateOn","FormBuilder","group","cc","controls","_reduceControls","control","formState","validatorOrOpts","asyncValidator","array","map","c","_createControl","Object","keys","forEach","controlName","Array","isArray","value","validator","length","ɵfac","FormBuilder_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { ReactiveFormsModule } from './form_providers';\nimport { AbstractControl, FormArray, FormControl, FormGroup } from './model';\nimport * as i0 from \"@angular/core\";\nfunction isAbstractControlOptions(options) {\n    return options.asyncValidators !== undefined ||\n        options.validators !== undefined ||\n        options.updateOn !== undefined;\n}\n/**\n * @description\n * Creates an `AbstractControl` from a user-specified configuration.\n *\n * The `FormBuilder` provides syntactic sugar that shortens creating instances of a\n * `FormControl`, `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to\n * build complex forms.\n *\n * @see [Reactive Forms Guide](/guide/reactive-forms)\n *\n * @publicApi\n */\nexport class FormBuilder {\n    group(cc, options = null) {\n        const controls = this._reduceControls(cc);\n        let validators = null;\n        let asyncValidators = null;\n        let updateOn = undefined;\n        if (options != null) {\n            if (isAbstractControlOptions(options)) {\n                // `options` are `AbstractControlOptions`\n                validators = options.validators != null ? options.validators : null;\n                asyncValidators = options.asyncValidators != null ? options.asyncValidators : null;\n                updateOn = options.updateOn != null ? options.updateOn : undefined;\n            }\n            else {\n                // `options` are legacy form group options\n                validators = options['validator'] != null ? options['validator'] : null;\n                asyncValidators = options['asyncValidator'] != null ? options['asyncValidator'] : null;\n            }\n        }\n        return new FormGroup(controls, { asyncValidators, updateOn, validators });\n    }\n    control(formState, validatorOrOpts, asyncValidator) {\n        return new FormControl(formState, validatorOrOpts, asyncValidator);\n    }\n    /**\n     * Constructs a new `FormArray` from the given array of configurations,\n     * validators and options.\n     *\n     * TODO: Do we want to support providing default values to create non-nullable controls?\n     *\n     * @param cc An array of child controls or control configs. Each\n     * child control is given an index when it is registered.\n     *\n     * @param validatorOrOpts A synchronous validator function, or an array of\n     * such functions, or an `AbstractControlOptions` object that contains\n     * validation functions and a validation trigger.\n     *\n     * @param asyncValidator A single async validator or array of async validator\n     * functions.\n     */\n    array(cc, validatorOrOpts, asyncValidator) {\n        const controls = cc.map(c => this._createControl(c));\n        return new FormArray(controls, validatorOrOpts, asyncValidator);\n    }\n    /** @internal */\n    _reduceControls(cc) {\n        const controls = {};\n        Object.keys(cc).forEach(controlName => {\n            controls[controlName] = this._createControl(cc[controlName]);\n        });\n        return controls;\n    }\n    /** @internal */\n    _createControl(cc) {\n        if (cc instanceof FormControl) {\n            return cc;\n        }\n        else if (cc instanceof AbstractControl) { // A control; just return it\n            return cc;\n        }\n        else if (Array.isArray(cc)) { // ControlConfig Array\n            const value = cc[0];\n            const validator = cc.length > 1 ? cc[1] : null;\n            const asyncValidator = cc.length > 2 ? cc[2] : null;\n            return this.control(value, validator, asyncValidator);\n        }\n        else { // T or FormState<T>\n            return this.control(cc);\n        }\n    }\n}\nFormBuilder.ɵfac = function FormBuilder_Factory(t) { return new (t || FormBuilder)(); };\nFormBuilder.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: FormBuilder, factory: FormBuilder.ɵfac, providedIn: ReactiveFormsModule });\n"]},"metadata":{},"sourceType":"module"}