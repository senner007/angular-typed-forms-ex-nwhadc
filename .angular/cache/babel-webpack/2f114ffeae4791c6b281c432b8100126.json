{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, forwardRef } from '@angular/core';\nimport { NG_ASYNC_VALIDATORS, NG_VALIDATORS } from '../../validators';\nimport { AbstractFormGroupDirective } from '../abstract_form_group_directive';\nimport { NG_VALUE_ACCESSOR } from '../control_value_accessor';\nimport { NgControl } from '../ng_control';\nimport { controlParentException, disabledAttrWarning, ngModelGroupException } from '../reactive_errors';\nimport { _ngModelWarning, controlPath, isPropertyUpdated, selectValueAccessor } from '../shared';\nimport { NG_MODEL_WITH_FORM_CONTROL_WARNING } from './form_control_directive';\nimport { FormGroupDirective } from './form_group_directive';\nimport { FormArrayName, FormGroupName } from './form_group_name';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../control_container\";\nconst ngDevMode = true;\nexport const controlNameBinding = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlName)\n};\n/**\n * @description\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * @usageNotes\n *\n * ### Register `FormControl` within a group\n *\n * The following example shows how to register multiple form controls within a form group\n * and set their value.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel is deprecated\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n *\n * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n\nexport class FormControlName extends NgControl {\n  constructor(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n    super();\n    this._ngModelWarningConfig = _ngModelWarningConfig;\n    this._added = false;\n    /** @deprecated as of v6 */\n\n    this.update = new EventEmitter();\n    /**\n     * @description\n     * Instance property used to track whether an ngModel warning has been sent out for this\n     * particular FormControlName instance. Used to support warning config of \"always\".\n     *\n     * @internal\n     */\n\n    this._ngModelWarningSent = false;\n    this._parent = parent;\n\n    this._setValidators(validators);\n\n    this._setAsyncValidators(asyncValidators);\n\n    this.valueAccessor = selectValueAccessor(this, valueAccessors);\n  }\n  /**\n   * @description\n   * Triggers a warning in dev mode that this input should not be used with reactive forms.\n   */\n\n\n  set isDisabled(isDisabled) {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      console.warn(disabledAttrWarning);\n    }\n  }\n  /** @nodoc */\n\n\n  ngOnChanges(changes) {\n    if (!this._added) this._setUpControl();\n\n    if (isPropertyUpdated(changes, this.viewModel)) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);\n      }\n\n      this.viewModel = this.model;\n      this.formDirective.updateModel(this, this.model);\n    }\n  }\n  /** @nodoc */\n\n\n  ngOnDestroy() {\n    if (this.formDirective) {\n      this.formDirective.removeControl(this);\n    }\n  }\n  /**\n   * @description\n   * Sets the new value for the view model and emits an `ngModelChange` event.\n   *\n   * @param newValue The new value for the view model.\n   */\n\n\n  viewToModelUpdate(newValue) {\n    this.viewModel = newValue;\n    this.update.emit(newValue);\n  }\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n\n\n  get path() {\n    return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n  }\n  /**\n   * @description\n   * The top-level directive for this group if present, otherwise null.\n   */\n\n\n  get formDirective() {\n    return this._parent ? this._parent.formDirective : null;\n  }\n\n  _checkParentType() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!(this._parent instanceof FormGroupName) && this._parent instanceof AbstractFormGroupDirective) {\n        throw ngModelGroupException();\n      } else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) && !(this._parent instanceof FormArrayName)) {\n        throw controlParentException();\n      }\n    }\n  }\n\n  _setUpControl() {\n    this._checkParentType();\n\n    this.control = this.formDirective.addControl(this);\n\n    if (this.control.disabled && this.valueAccessor.setDisabledState) {\n      this.valueAccessor.setDisabledState(true);\n    }\n\n    this._added = true;\n  }\n\n}\n/**\n * @description\n * Static property used to track whether any ngModel warnings have been sent across\n * all instances of FormControlName. Used to support warning config of \"once\".\n *\n * @internal\n */\n\nFormControlName._ngModelWarningSentOnce = false;\n\nFormControlName.ɵfac = function FormControlName_Factory(t) {\n  return new (t || FormControlName)(i0.ɵɵdirectiveInject(i1.ControlContainer, 13), i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10), i0.ɵɵdirectiveInject(NG_MODEL_WITH_FORM_CONTROL_WARNING, 8));\n};\n\nFormControlName.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: FormControlName,\n  selectors: [[\"\", \"formControlName\", \"\"]],\n  inputs: {\n    name: [\"formControlName\", \"name\"],\n    isDisabled: [\"disabled\", \"isDisabled\"],\n    model: [\"ngModel\", \"model\"]\n  },\n  outputs: {\n    update: \"ngModelChange\"\n  },\n  features: [i0.ɵɵProvidersFeature([controlNameBinding]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n});","map":{"version":3,"sources":["/home/nig/angular-typed-forms-ex-nwhadc/src/forms/src/directives/reactive_directives/form_control_name.ts"],"names":["EventEmitter","forwardRef","NG_ASYNC_VALIDATORS","NG_VALIDATORS","AbstractFormGroupDirective","NG_VALUE_ACCESSOR","NgControl","controlParentException","disabledAttrWarning","ngModelGroupException","_ngModelWarning","controlPath","isPropertyUpdated","selectValueAccessor","NG_MODEL_WITH_FORM_CONTROL_WARNING","FormGroupDirective","FormArrayName","FormGroupName","i0","i1","ngDevMode","controlNameBinding","provide","useExisting","FormControlName","constructor","parent","validators","asyncValidators","valueAccessors","_ngModelWarningConfig","_added","update","_ngModelWarningSent","_parent","_setValidators","_setAsyncValidators","valueAccessor","isDisabled","console","warn","ngOnChanges","changes","_setUpControl","viewModel","model","formDirective","updateModel","ngOnDestroy","removeControl","viewToModelUpdate","newValue","emit","path","name","toString","_checkParentType","control","addControl","disabled","setDisabledState","_ngModelWarningSentOnce","ɵfac","FormControlName_Factory","t","ɵɵdirectiveInject","ControlContainer","ɵdir","ɵɵdefineDirective","type","selectors","inputs","outputs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, forwardRef, } from '@angular/core';\nimport { NG_ASYNC_VALIDATORS, NG_VALIDATORS } from '../../validators';\nimport { AbstractFormGroupDirective } from '../abstract_form_group_directive';\nimport { NG_VALUE_ACCESSOR, } from '../control_value_accessor';\nimport { NgControl } from '../ng_control';\nimport { controlParentException, disabledAttrWarning, ngModelGroupException, } from '../reactive_errors';\nimport { _ngModelWarning, controlPath, isPropertyUpdated, selectValueAccessor, } from '../shared';\nimport { NG_MODEL_WITH_FORM_CONTROL_WARNING } from './form_control_directive';\nimport { FormGroupDirective } from './form_group_directive';\nimport { FormArrayName, FormGroupName } from './form_group_name';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../control_container\";\nconst ngDevMode = true;\nexport const controlNameBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(() => FormControlName),\n};\n/**\n * @description\n * Syncs a `FormControl` in an existing `FormGroup` to a form control\n * element by name.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `FormControl`\n * @see `AbstractControl`\n *\n * @usageNotes\n *\n * ### Register `FormControl` within a group\n *\n * The following example shows how to register multiple form controls within a form group\n * and set their value.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * To see `formControlName` examples with different form control types, see:\n *\n * * Radio buttons: `RadioControlValueAccessor`\n * * Selects: `SelectControlValueAccessor`\n *\n * ### Use with ngModel is deprecated\n *\n * Support for using the `ngModel` input property and `ngModelChange` event with reactive\n * form directives has been deprecated in Angular v6 and is scheduled for removal in\n * a future version of Angular.\n *\n * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nexport class FormControlName extends NgControl {\n    constructor(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {\n        super();\n        this._ngModelWarningConfig = _ngModelWarningConfig;\n        this._added = false;\n        /** @deprecated as of v6 */\n        this.update = new EventEmitter();\n        /**\n         * @description\n         * Instance property used to track whether an ngModel warning has been sent out for this\n         * particular FormControlName instance. Used to support warning config of \"always\".\n         *\n         * @internal\n         */\n        this._ngModelWarningSent = false;\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /**\n     * @description\n     * Triggers a warning in dev mode that this input should not be used with reactive forms.\n     */\n    set isDisabled(isDisabled) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            console.warn(disabledAttrWarning);\n        }\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        if (!this._added)\n            this._setUpControl();\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);\n            }\n            this.viewModel = this.model;\n            this.formDirective.updateModel(this, this.model);\n        }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this.formDirective) {\n            this.formDirective.removeControl(this);\n        }\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value for the view model.\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);\n    }\n    /**\n     * @description\n     * The top-level directive for this group if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    _checkParentType() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!(this._parent instanceof FormGroupName) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                throw ngModelGroupException();\n            }\n            else if (!(this._parent instanceof FormGroupName) &&\n                !(this._parent instanceof FormGroupDirective) &&\n                !(this._parent instanceof FormArrayName)) {\n                throw controlParentException();\n            }\n        }\n    }\n    _setUpControl() {\n        this._checkParentType();\n        this.control =\n            this.formDirective.addControl(this);\n        if (this.control.disabled && this.valueAccessor.setDisabledState) {\n            this.valueAccessor.setDisabledState(true);\n        }\n        this._added = true;\n    }\n}\n/**\n * @description\n * Static property used to track whether any ngModel warnings have been sent across\n * all instances of FormControlName. Used to support warning config of \"once\".\n *\n * @internal\n */\nFormControlName._ngModelWarningSentOnce = false;\nFormControlName.ɵfac = function FormControlName_Factory(t) { return new (t || FormControlName)(i0.ɵɵdirectiveInject(i1.ControlContainer, 13), i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10), i0.ɵɵdirectiveInject(NG_MODEL_WITH_FORM_CONTROL_WARNING, 8)); };\nFormControlName.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: FormControlName, selectors: [[\"\", \"formControlName\", \"\"]], inputs: { name: [\"formControlName\", \"name\"], isDisabled: [\"disabled\", \"isDisabled\"], model: [\"ngModel\", \"model\"] }, outputs: { update: \"ngModelChange\" }, features: [i0.ɵɵProvidersFeature([controlNameBinding]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature] });\n"]},"metadata":{},"sourceType":"module"}