{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, forwardRef } from '@angular/core';\nimport { FormControl } from '../model';\nimport { NG_ASYNC_VALIDATORS, NG_VALIDATORS } from '../validators';\nimport { AbstractFormGroupDirective } from './abstract_form_group_directive';\nimport { NG_VALUE_ACCESSOR } from './control_value_accessor';\nimport { NgControl } from './ng_control';\nimport { NgForm } from './ng_form';\nimport { NgModelGroup } from './ng_model_group';\nimport { controlPath, isPropertyUpdated, selectValueAccessor, setUpControl } from './shared';\nimport { formGroupNameException, missingNameException, modelParentException } from './template_driven_errors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./control_container\";\nconst ngDevMode = true;\nexport const formControlBinding = {\n  provide: NgControl,\n  useExisting: forwardRef(() => NgModel)\n};\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have an old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel`s have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\n\nconst resolvedPromise = (() => Promise.resolve(null))();\n/**\n * @description\n * Creates a `FormControl` instance from a domain model and binds it\n * to a form control element.\n *\n * The `FormControl` instance tracks the value, user interaction, and\n * validation status of the control and keeps the view synced with the model. If used\n * within a parent form, the directive also registers itself with the form as a child\n * control.\n *\n * This directive is used by itself or as part of a larger form. Use the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional `Input`. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the domain model's value in the component\n * class sets the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-in-a-box syntax'), the value in the UI always syncs back to\n * the domain model in your class.\n *\n * To inspect the properties of the associated `FormControl` (like the validity state),\n * export the directive into a local template variable using `ngModel` as the key (ex:\n * `#myVar=\"ngModel\"`). You can then access the control using the directive's `control` property.\n * However, the most commonly used properties (like `valid` and `dirty`) also exist on the control\n * for direct access. See a full list of properties directly available in\n * `AbstractControlDirective`.\n *\n * @see `RadioControlValueAccessor`\n * @see `SelectControlValueAccessor`\n *\n * @usageNotes\n *\n * ### Using ngModel on a standalone control\n *\n * The following examples show a simple standalone control using `ngModel`:\n *\n * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,\n * as the parent form syncs the value for you. You access its properties by exporting it into a\n * local template variable using `ngForm` such as (`#f=\"ngForm\"`). Use the variable where\n * needed on form submission.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * ### Using ngModel within a form\n *\n * The following example shows controls using `ngModel` within a form:\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Using a standalone ngModel within a group\n *\n * The following example shows you how to use a standalone ngModel control\n * within a form. This controls the display of the form, but doesn't contain form data.\n *\n * ```html\n * <form>\n *   <input name=\"login\" ngModel placeholder=\"Login\">\n *   <input type=\"checkbox\" ngModel [ngModelOptions]=\"{standalone: true}\"> Show more options?\n * </form>\n * <!-- form value: {login: ''} -->\n * ```\n *\n * ### Setting the ngModel `name` attribute through options\n *\n * The following example shows you an alternate way to set the name attribute. Here,\n * an attribute identified as name is used within a custom form control component. To still be able\n * to specify the NgModel's name, you must specify it using the `ngModelOptions` input instead.\n *\n * ```html\n * <form>\n *   <my-custom-form-control name=\"Nancy\" ngModel [ngModelOptions]=\"{name: 'user'}\">\n *   </my-custom-form-control>\n * </form>\n * <!-- form value: {user: ''} -->\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\n\n\nexport class NgModel extends NgControl {\n  constructor(parent, validators, asyncValidators, valueAccessors) {\n    super();\n    this.control = new FormControl();\n    /** @internal */\n\n    this._registered = false;\n    /**\n     * @description\n     * Event emitter for producing the `ngModelChange` event after\n     * the view model updates.\n     */\n\n    this.update = new EventEmitter();\n    this._parent = parent;\n\n    this._setValidators(validators);\n\n    this._setAsyncValidators(asyncValidators);\n\n    this.valueAccessor = selectValueAccessor(this, valueAccessors);\n  }\n  /** @nodoc */\n\n\n  ngOnChanges(changes) {\n    this._checkForErrors();\n\n    if (!this._registered) this._setUpControl();\n\n    if ('isDisabled' in changes) {\n      this._updateDisabled(changes);\n    }\n\n    if (isPropertyUpdated(changes, this.viewModel)) {\n      this._updateValue(this.model);\n\n      this.viewModel = this.model;\n    }\n  }\n  /** @nodoc */\n\n\n  ngOnDestroy() {\n    this.formDirective && this.formDirective.removeControl(this);\n  }\n  /**\n   * @description\n   * Returns an array that represents the path from the top-level form to this control.\n   * Each index is the string name of the control on that level.\n   */\n\n\n  get path() {\n    return this._parent ? controlPath(this.name, this._parent) : [this.name];\n  }\n  /**\n   * @description\n   * The top-level directive for this control if present, otherwise null.\n   */\n\n\n  get formDirective() {\n    return this._parent ? this._parent.formDirective : null;\n  }\n  /**\n   * @description\n   * Sets the new value for the view model and emits an `ngModelChange` event.\n   *\n   * @param newValue The new value emitted by `ngModelChange`.\n   */\n\n\n  viewToModelUpdate(newValue) {\n    this.viewModel = newValue;\n    this.update.emit(newValue);\n  }\n\n  _setUpControl() {\n    this._setUpdateStrategy();\n\n    this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);\n    this._registered = true;\n  }\n\n  _setUpdateStrategy() {\n    if (this.options && this.options.updateOn != null) {\n      this.control._updateOn = this.options.updateOn;\n    }\n  }\n\n  _isStandalone() {\n    return !this._parent || !!(this.options && this.options.standalone);\n  }\n\n  _setUpStandalone() {\n    setUpControl(this.control, this);\n    this.control.updateValueAndValidity({\n      emitEvent: false\n    });\n  }\n\n  _checkForErrors() {\n    if (!this._isStandalone()) {\n      this._checkParentType();\n    }\n\n    this._checkName();\n  }\n\n  _checkParentType() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      if (!(this._parent instanceof NgModelGroup) && this._parent instanceof AbstractFormGroupDirective) {\n        throw formGroupNameException();\n      } else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n        throw modelParentException();\n      }\n    }\n  }\n\n  _checkName() {\n    if (this.options && this.options.name) this.name = this.options.name;\n\n    if (!this._isStandalone() && !this.name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw missingNameException();\n    }\n  }\n\n  _updateValue(value) {\n    resolvedPromise.then(() => {\n      this.control.setValue(value, {\n        emitViewToModelChange: false\n      });\n    });\n  }\n\n  _updateDisabled(changes) {\n    const disabledValue = changes['isDisabled'].currentValue;\n    const isDisabled = disabledValue === '' || disabledValue && disabledValue !== 'false';\n    resolvedPromise.then(() => {\n      if (isDisabled && !this.control.disabled) {\n        this.control.disable();\n      } else if (!isDisabled && this.control.disabled) {\n        this.control.enable();\n      }\n    });\n  }\n\n}\n\nNgModel.ɵfac = function NgModel_Factory(t) {\n  return new (t || NgModel)(i0.ɵɵdirectiveInject(i1.ControlContainer, 9), i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10));\n};\n\nNgModel.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: NgModel,\n  selectors: [[\"\", \"ngModel\", \"\", 3, \"formControlName\", \"\", 3, \"formControl\", \"\"]],\n  inputs: {\n    name: \"name\",\n    isDisabled: [\"disabled\", \"isDisabled\"],\n    model: [\"ngModel\", \"model\"],\n    options: [\"ngModelOptions\", \"options\"]\n  },\n  outputs: {\n    update: \"ngModelChange\"\n  },\n  exportAs: [\"ngModel\"],\n  features: [i0.ɵɵProvidersFeature([formControlBinding]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n});","map":{"version":3,"sources":["/home/nig/angular-typed-forms-ex-nwhadc/src/forms/src/directives/ng_model.ts"],"names":["EventEmitter","forwardRef","FormControl","NG_ASYNC_VALIDATORS","NG_VALIDATORS","AbstractFormGroupDirective","NG_VALUE_ACCESSOR","NgControl","NgForm","NgModelGroup","controlPath","isPropertyUpdated","selectValueAccessor","setUpControl","formGroupNameException","missingNameException","modelParentException","i0","i1","ngDevMode","formControlBinding","provide","useExisting","NgModel","resolvedPromise","Promise","resolve","constructor","parent","validators","asyncValidators","valueAccessors","control","_registered","update","_parent","_setValidators","_setAsyncValidators","valueAccessor","ngOnChanges","changes","_checkForErrors","_setUpControl","_updateDisabled","viewModel","_updateValue","model","ngOnDestroy","formDirective","removeControl","path","name","viewToModelUpdate","newValue","emit","_setUpdateStrategy","_isStandalone","_setUpStandalone","addControl","options","updateOn","_updateOn","standalone","updateValueAndValidity","emitEvent","_checkParentType","_checkName","value","then","setValue","emitViewToModelChange","disabledValue","currentValue","isDisabled","disabled","disable","enable","ɵfac","NgModel_Factory","t","ɵɵdirectiveInject","ControlContainer","ɵdir","ɵɵdefineDirective","type","selectors","inputs","outputs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,UAAvB,QAA0C,eAA1C;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,SAASC,mBAAT,EAA8BC,aAA9B,QAAmD,eAAnD;AACA,SAASC,0BAAT,QAA2C,iCAA3C;AACA,SAASC,iBAAT,QAAmC,0BAAnC;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,WAAT,EAAsBC,iBAAtB,EAAyCC,mBAAzC,EAA8DC,YAA9D,QAAmF,UAAnF;AACA,SAASC,sBAAT,EAAiCC,oBAAjC,EAAuDC,oBAAvD,QAAoF,0BAApF;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,qBAApB;AACA,MAAMC,SAAS,GAAG,IAAlB;AACA,OAAO,MAAMC,kBAAkB,GAAG;AAC9BC,EAAAA,OAAO,EAAEd,SADqB;AAE9Be,EAAAA,WAAW,EAAErB,UAAU,CAAC,MAAMsB,OAAP;AAFO,CAA3B;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAG,CAAC,MAAMC,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP,GAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, forwardRef, } from '@angular/core';\nimport { FormControl } from '../model';\nimport { NG_ASYNC_VALIDATORS, NG_VALIDATORS } from '../validators';\nimport { AbstractFormGroupDirective } from './abstract_form_group_directive';\nimport { NG_VALUE_ACCESSOR, } from './control_value_accessor';\nimport { NgControl } from './ng_control';\nimport { NgForm } from './ng_form';\nimport { NgModelGroup } from './ng_model_group';\nimport { controlPath, isPropertyUpdated, selectValueAccessor, setUpControl, } from './shared';\nimport { formGroupNameException, missingNameException, modelParentException, } from './template_driven_errors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./control_container\";\nconst ngDevMode = true;\nexport const formControlBinding = {\n    provide: NgControl,\n    useExisting: forwardRef(() => NgModel),\n};\n/**\n * `ngModel` forces an additional change detection run when its inputs change:\n * E.g.:\n * ```\n * <div>{{myModel.valid}}</div>\n * <input [(ngModel)]=\"myValue\" #myModel=\"ngModel\">\n * ```\n * I.e. `ngModel` can export itself on the element and then be used in the template.\n * Normally, this would result in expressions before the `input` that use the exported directive\n * to have an old value as they have been\n * dirty checked before. As this is a very common case for `ngModel`, we added this second change\n * detection run.\n *\n * Notes:\n * - this is just one extra run no matter how many `ngModel`s have been changed.\n * - this is a general problem when using `exportAs` for directives!\n */\nconst resolvedPromise = (() => Promise.resolve(null))();\n/**\n * @description\n * Creates a `FormControl` instance from a domain model and binds it\n * to a form control element.\n *\n * The `FormControl` instance tracks the value, user interaction, and\n * validation status of the control and keeps the view synced with the model. If used\n * within a parent form, the directive also registers itself with the form as a child\n * control.\n *\n * This directive is used by itself or as part of a larger form. Use the\n * `ngModel` selector to activate it.\n *\n * It accepts a domain model as an optional `Input`. If you have a one-way binding\n * to `ngModel` with `[]` syntax, changing the domain model's value in the component\n * class sets the value in the view. If you have a two-way binding with `[()]` syntax\n * (also known as 'banana-in-a-box syntax'), the value in the UI always syncs back to\n * the domain model in your class.\n *\n * To inspect the properties of the associated `FormControl` (like the validity state),\n * export the directive into a local template variable using `ngModel` as the key (ex:\n * `#myVar=\"ngModel\"`). You can then access the control using the directive's `control` property.\n * However, the most commonly used properties (like `valid` and `dirty`) also exist on the control\n * for direct access. See a full list of properties directly available in\n * `AbstractControlDirective`.\n *\n * @see `RadioControlValueAccessor`\n * @see `SelectControlValueAccessor`\n *\n * @usageNotes\n *\n * ### Using ngModel on a standalone control\n *\n * The following examples show a simple standalone control using `ngModel`:\n *\n * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n *\n * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n * so that the control can be registered with the parent form under that name.\n *\n * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,\n * as the parent form syncs the value for you. You access its properties by exporting it into a\n * local template variable using `ngForm` such as (`#f=\"ngForm\"`). Use the variable where\n * needed on form submission.\n *\n * If you do need to populate initial values into your form, using a one-way binding for\n * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n * than the domain model's value on submit.\n *\n * ### Using ngModel within a form\n *\n * The following example shows controls using `ngModel` within a form:\n *\n * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n *\n * ### Using a standalone ngModel within a group\n *\n * The following example shows you how to use a standalone ngModel control\n * within a form. This controls the display of the form, but doesn't contain form data.\n *\n * ```html\n * <form>\n *   <input name=\"login\" ngModel placeholder=\"Login\">\n *   <input type=\"checkbox\" ngModel [ngModelOptions]=\"{standalone: true}\"> Show more options?\n * </form>\n * <!-- form value: {login: ''} -->\n * ```\n *\n * ### Setting the ngModel `name` attribute through options\n *\n * The following example shows you an alternate way to set the name attribute. Here,\n * an attribute identified as name is used within a custom form control component. To still be able\n * to specify the NgModel's name, you must specify it using the `ngModelOptions` input instead.\n *\n * ```html\n * <form>\n *   <my-custom-form-control name=\"Nancy\" ngModel [ngModelOptions]=\"{name: 'user'}\">\n *   </my-custom-form-control>\n * </form>\n * <!-- form value: {user: ''} -->\n * ```\n *\n * @ngModule FormsModule\n * @publicApi\n */\nexport class NgModel extends NgControl {\n    constructor(parent, validators, asyncValidators, valueAccessors) {\n        super();\n        this.control = new FormControl();\n        /** @internal */\n        this._registered = false;\n        /**\n         * @description\n         * Event emitter for producing the `ngModelChange` event after\n         * the view model updates.\n         */\n        this.update = new EventEmitter();\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n        this.valueAccessor = selectValueAccessor(this, valueAccessors);\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        this._checkForErrors();\n        if (!this._registered)\n            this._setUpControl();\n        if ('isDisabled' in changes) {\n            this._updateDisabled(changes);\n        }\n        if (isPropertyUpdated(changes, this.viewModel)) {\n            this._updateValue(this.model);\n            this.viewModel = this.model;\n        }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        this.formDirective && this.formDirective.removeControl(this);\n    }\n    /**\n     * @description\n     * Returns an array that represents the path from the top-level form to this control.\n     * Each index is the string name of the control on that level.\n     */\n    get path() {\n        return this._parent ? controlPath(this.name, this._parent) : [this.name];\n    }\n    /**\n     * @description\n     * The top-level directive for this control if present, otherwise null.\n     */\n    get formDirective() {\n        return this._parent ? this._parent.formDirective : null;\n    }\n    /**\n     * @description\n     * Sets the new value for the view model and emits an `ngModelChange` event.\n     *\n     * @param newValue The new value emitted by `ngModelChange`.\n     */\n    viewToModelUpdate(newValue) {\n        this.viewModel = newValue;\n        this.update.emit(newValue);\n    }\n    _setUpControl() {\n        this._setUpdateStrategy();\n        this._isStandalone()\n            ? this._setUpStandalone()\n            : this.formDirective.addControl(this);\n        this._registered = true;\n    }\n    _setUpdateStrategy() {\n        if (this.options && this.options.updateOn != null) {\n            this.control._updateOn = this.options.updateOn;\n        }\n    }\n    _isStandalone() {\n        return !this._parent || !!(this.options && this.options.standalone);\n    }\n    _setUpStandalone() {\n        setUpControl(this.control, this);\n        this.control.updateValueAndValidity({ emitEvent: false });\n    }\n    _checkForErrors() {\n        if (!this._isStandalone()) {\n            this._checkParentType();\n        }\n        this._checkName();\n    }\n    _checkParentType() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!(this._parent instanceof NgModelGroup) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                throw formGroupNameException();\n            }\n            else if (!(this._parent instanceof NgModelGroup) &&\n                !(this._parent instanceof NgForm)) {\n                throw modelParentException();\n            }\n        }\n    }\n    _checkName() {\n        if (this.options && this.options.name)\n            this.name = this.options.name;\n        if (!this._isStandalone() &&\n            !this.name &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw missingNameException();\n        }\n    }\n    _updateValue(value) {\n        resolvedPromise.then(() => {\n            this.control.setValue(value, { emitViewToModelChange: false });\n        });\n    }\n    _updateDisabled(changes) {\n        const disabledValue = changes['isDisabled'].currentValue;\n        const isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');\n        resolvedPromise.then(() => {\n            if (isDisabled && !this.control.disabled) {\n                this.control.disable();\n            }\n            else if (!isDisabled && this.control.disabled) {\n                this.control.enable();\n            }\n        });\n    }\n}\nNgModel.ɵfac = function NgModel_Factory(t) { return new (t || NgModel)(i0.ɵɵdirectiveInject(i1.ControlContainer, 9), i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10)); };\nNgModel.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: NgModel, selectors: [[\"\", \"ngModel\", \"\", 3, \"formControlName\", \"\", 3, \"formControl\", \"\"]], inputs: { name: \"name\", isDisabled: [\"disabled\", \"isDisabled\"], model: [\"ngModel\", \"model\"], options: [\"ngModelOptions\", \"options\"] }, outputs: { update: \"ngModelChange\" }, exportAs: [\"ngModel\"], features: [i0.ɵɵProvidersFeature([formControlBinding]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature] });\n"]},"metadata":{},"sourceType":"module"}