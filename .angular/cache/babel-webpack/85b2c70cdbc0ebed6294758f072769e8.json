{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, forwardRef } from '@angular/core';\nimport { FormControl } from '../../model';\nimport { NG_ASYNC_VALIDATORS, NG_VALIDATORS } from '../../validators';\nimport { ControlContainer } from '../control_container';\nimport { missingFormException } from '../reactive_errors';\nimport { cleanUpControl, cleanUpFormContainer, cleanUpValidators, removeListItem, setUpControl, setUpFormContainer, setUpValidators, syncPendingControls } from '../shared';\nimport * as i0 from \"@angular/core\";\nconst ngDevMode = true;\nexport const formDirectiveProvider = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => FormGroupDirective)\n};\n/**\n * @description\n *\n * Binds an existing `FormGroup` to a DOM element.\n *\n * This directive accepts an existing `FormGroup` instance. It will then use this\n * `FormGroup` instance to match any child `FormControl`, `FormGroup`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * @usageNotes\n * ### Register Form Group\n *\n * The following example registers a `FormGroup` with first name and last name controls,\n * and listens for the *ngSubmit* event when the button is clicked.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\n\nexport class FormGroupDirective extends ControlContainer {\n  constructor(validators, asyncValidators) {\n    super();\n    this.validators = validators;\n    this.asyncValidators = asyncValidators;\n    /**\n     * @description\n     * Reports whether the form submission has been triggered.\n     */\n\n    this.submitted = false;\n    /**\n     * Callback that should be invoked when controls in FormGroup or FormArray collection change\n     * (added or removed). This callback triggers corresponding DOM updates.\n     */\n\n    this._onCollectionChange = () => this._updateDomValue();\n    /**\n     * @description\n     * Tracks the list of added `FormControlName` instances\n     */\n\n\n    this.directives = [];\n    /**\n     * @description\n     * Tracks the `FormGroup` bound to this directive.\n     */\n\n    this.form = null;\n    /**\n     * @description\n     * Emits an event when the form submission has been triggered.\n     */\n\n    this.ngSubmit = new EventEmitter();\n\n    this._setValidators(validators);\n\n    this._setAsyncValidators(asyncValidators);\n  }\n  /** @nodoc */\n\n\n  ngOnChanges(changes) {\n    this._checkFormPresent();\n\n    if (changes.hasOwnProperty('form')) {\n      this._updateValidators();\n\n      this._updateDomValue();\n\n      this._updateRegistrations();\n\n      this._oldForm = this.form;\n    }\n  }\n  /** @nodoc */\n\n\n  ngOnDestroy() {\n    if (this.form) {\n      cleanUpValidators(this.form, this); // Currently the `onCollectionChange` callback is rewritten each time the\n      // `_registerOnCollectionChange` function is invoked. The implication is that cleanup should\n      // happen *only* when the `onCollectionChange` callback was set by this directive instance.\n      // Otherwise it might cause overriding a callback of some other directive instances. We should\n      // consider updating this logic later to make it similar to how `onChange` callbacks are\n      // handled, see https://github.com/angular/angular/issues/39732 for additional info.\n\n      if (this.form._onCollectionChange === this._onCollectionChange) {\n        this.form._registerOnCollectionChange(() => {});\n      }\n    }\n  }\n  /**\n   * @description\n   * Returns this directive's instance.\n   */\n\n\n  get formDirective() {\n    return this;\n  }\n  /**\n   * @description\n   * Returns the `FormGroup` bound to this directive.\n   */\n\n\n  get control() {\n    return this.form;\n  }\n  /**\n   * @description\n   * Returns an array representing the path to this group. Because this directive\n   * always lives at the top level of a form, it always an empty array.\n   */\n\n\n  get path() {\n    return [];\n  }\n  /**\n   * @description\n   * Method that sets up the control directive in this group, re-calculates its value\n   * and validity, and adds the instance to the internal list of directives.\n   *\n   * @param dir The `FormControlName` directive instance.\n   */\n\n\n  addControl(dir) {\n    const ctrl = this.form.get(dir.path);\n    setUpControl(ctrl, dir);\n    ctrl.updateValueAndValidity({\n      emitEvent: false\n    });\n    this.directives.push(dir);\n    return ctrl;\n  }\n  /**\n   * @description\n   * Retrieves the `FormControl` instance from the provided `FormControlName` directive\n   *\n   * @param dir The `FormControlName` directive instance.\n   */\n\n\n  getControl(dir) {\n    return this.form.get(dir.path);\n  }\n  /**\n   * @description\n   * Removes the `FormControlName` instance from the internal list of directives\n   *\n   * @param dir The `FormControlName` directive instance.\n   */\n\n\n  removeControl(dir) {\n    cleanUpControl(dir.control || null, dir,\n    /* validateControlPresenceOnChange */\n    false);\n    removeListItem(this.directives, dir);\n  }\n  /**\n   * Adds a new `FormGroupName` directive instance to the form.\n   *\n   * @param dir The `FormGroupName` directive instance.\n   */\n\n\n  addFormGroup(dir) {\n    this._setUpFormContainer(dir);\n  }\n  /**\n   * Performs the necessary cleanup when a `FormGroupName` directive instance is removed from the\n   * view.\n   *\n   * @param dir The `FormGroupName` directive instance.\n   */\n\n\n  removeFormGroup(dir) {\n    this._cleanUpFormContainer(dir);\n  }\n  /**\n   * @description\n   * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance\n   *\n   * @param dir The `FormGroupName` directive instance.\n   */\n\n\n  getFormGroup(dir) {\n    return this.form.get(dir.path);\n  }\n  /**\n   * Performs the necessary setup when a `FormArrayName` directive instance is added to the view.\n   *\n   * @param dir The `FormArrayName` directive instance.\n   */\n\n\n  addFormArray(dir) {\n    this._setUpFormContainer(dir);\n  }\n  /**\n   * Performs the necessary cleanup when a `FormArrayName` directive instance is removed from the\n   * view.\n   *\n   * @param dir The `FormArrayName` directive instance.\n   */\n\n\n  removeFormArray(dir) {\n    this._cleanUpFormContainer(dir);\n  }\n  /**\n   * @description\n   * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.\n   *\n   * @param dir The `FormArrayName` directive instance.\n   */\n\n\n  getFormArray(dir) {\n    return this.form.get(dir.path);\n  }\n  /**\n   * Sets the new value for the provided `FormControlName` directive.\n   *\n   * @param dir The `FormControlName` directive instance.\n   * @param value The new value for the directive's control.\n   */\n\n\n  updateModel(dir, value) {\n    const ctrl = this.form.get(dir.path);\n    ctrl.setValue(value);\n  }\n  /**\n   * @description\n   * Method called with the \"submit\" event is triggered on the form.\n   * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n   *\n   * @param $event The \"submit\" event object\n   */\n\n\n  onSubmit($event) {\n    this.submitted = true;\n    syncPendingControls(this.form, this.directives);\n    this.ngSubmit.emit($event);\n    return false;\n  }\n  /**\n   * @description\n   * Method called when the \"reset\" event is triggered on the form.\n   */\n\n\n  onReset() {\n    this.resetForm();\n  }\n  /**\n   * @description\n   * Resets the form to an initial value and resets its submitted status.\n   *\n   * @param value The new value for the form.\n   */\n\n\n  resetForm(value = undefined) {\n    this.form.reset(value);\n    this.submitted = false;\n  }\n  /** @internal */\n\n\n  _updateDomValue() {\n    this.directives.forEach(dir => {\n      const oldCtrl = dir.control;\n      const newCtrl = this.form.get(dir.path);\n\n      if (oldCtrl !== newCtrl) {\n        // Note: the value of the `dir.control` may not be defined, for example when it's a first\n        // `FormControl` that is added to a `FormGroup` instance (via `addControl` call).\n        cleanUpControl(oldCtrl || null, dir); // Check whether new control at the same location inside the corresponding `FormGroup` is an\n        // instance of `FormControl` and perform control setup only if that's the case.\n        // Note: we don't need to clear the list of directives (`this.directives`) here, it would be\n        // taken care of in the `removeControl` method invoked when corresponding `formControlName`\n        // directive instance is being removed (invoked from `FormControlName.ngOnDestroy`).\n\n        if (newCtrl instanceof FormControl) {\n          setUpControl(newCtrl, dir);\n          dir.control = newCtrl;\n        }\n      }\n    });\n\n    this.form._updateTreeValidity({\n      emitEvent: false\n    });\n  }\n\n  _setUpFormContainer(dir) {\n    const ctrl = this.form.get(dir.path);\n    setUpFormContainer(ctrl, dir); // NOTE: this operation looks unnecessary in case no new validators were added in\n    // `setUpFormContainer` call. Consider updating this code to match the logic in\n    // `_cleanUpFormContainer` function.\n\n    ctrl.updateValueAndValidity({\n      emitEvent: false\n    });\n  }\n\n  _cleanUpFormContainer(dir) {\n    if (this.form) {\n      const ctrl = this.form.get(dir.path);\n\n      if (ctrl) {\n        const isControlUpdated = cleanUpFormContainer(ctrl, dir);\n\n        if (isControlUpdated) {\n          // Run validity check only in case a control was updated (i.e. view validators were\n          // removed) as removing view validators might cause validity to change.\n          ctrl.updateValueAndValidity({\n            emitEvent: false\n          });\n        }\n      }\n    }\n  }\n\n  _updateRegistrations() {\n    this.form._registerOnCollectionChange(this._onCollectionChange);\n\n    if (this._oldForm) {\n      this._oldForm._registerOnCollectionChange(() => {});\n    }\n  }\n\n  _updateValidators() {\n    setUpValidators(this.form, this);\n\n    if (this._oldForm) {\n      cleanUpValidators(this._oldForm, this);\n    }\n  }\n\n  _checkFormPresent() {\n    if (!this.form && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw missingFormException();\n    }\n  }\n\n}\n\nFormGroupDirective.ɵfac = function FormGroupDirective_Factory(t) {\n  return new (t || FormGroupDirective)(i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10));\n};\n\nFormGroupDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: FormGroupDirective,\n  selectors: [[\"\", \"formGroup\", \"\"]],\n  hostBindings: function FormGroupDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"submit\", function FormGroupDirective_submit_HostBindingHandler($event) {\n        return ctx.onSubmit($event);\n      })(\"reset\", function FormGroupDirective_reset_HostBindingHandler() {\n        return ctx.onReset();\n      });\n    }\n  },\n  inputs: {\n    form: [\"formGroup\", \"form\"]\n  },\n  outputs: {\n    ngSubmit: \"ngSubmit\"\n  },\n  exportAs: [\"ngForm\"],\n  features: [i0.ɵɵProvidersFeature([formDirectiveProvider]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n});","map":{"version":3,"sources":["/home/nig/angular-typed-forms-ex-nwhadc/src/forms/src/directives/reactive_directives/form_group_directive.ts"],"names":["EventEmitter","forwardRef","FormControl","NG_ASYNC_VALIDATORS","NG_VALIDATORS","ControlContainer","missingFormException","cleanUpControl","cleanUpFormContainer","cleanUpValidators","removeListItem","setUpControl","setUpFormContainer","setUpValidators","syncPendingControls","i0","ngDevMode","formDirectiveProvider","provide","useExisting","FormGroupDirective","constructor","validators","asyncValidators","submitted","_onCollectionChange","_updateDomValue","directives","form","ngSubmit","_setValidators","_setAsyncValidators","ngOnChanges","changes","_checkFormPresent","hasOwnProperty","_updateValidators","_updateRegistrations","_oldForm","ngOnDestroy","_registerOnCollectionChange","formDirective","control","path","addControl","dir","ctrl","get","updateValueAndValidity","emitEvent","push","getControl","removeControl","addFormGroup","_setUpFormContainer","removeFormGroup","_cleanUpFormContainer","getFormGroup","addFormArray","removeFormArray","getFormArray","updateModel","value","setValue","onSubmit","$event","emit","onReset","resetForm","undefined","reset","forEach","oldCtrl","newCtrl","_updateTreeValidity","isControlUpdated","ɵfac","FormGroupDirective_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","hostBindings","FormGroupDirective_HostBindings","rf","ctx","ɵɵlistener","FormGroupDirective_submit_HostBindingHandler","FormGroupDirective_reset_HostBindingHandler","inputs","outputs","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,UAAvB,QAA0C,eAA1C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,mBAAT,EAA8BC,aAA9B,QAAmD,kBAAnD;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,oBAAT,QAAqC,oBAArC;AACA,SAASC,cAAT,EAAyBC,oBAAzB,EAA+CC,iBAA/C,EAAkEC,cAAlE,EAAkFC,YAAlF,EAAgGC,kBAAhG,EAAoHC,eAApH,EAAqIC,mBAArI,QAAiK,WAAjK;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,MAAMC,SAAS,GAAG,IAAlB;AACA,OAAO,MAAMC,qBAAqB,GAAG;AACjCC,EAAAA,OAAO,EAAEb,gBADwB;AAEjCc,EAAAA,WAAW,EAAElB,UAAU,CAAC,MAAMmB,kBAAP;AAFU,CAA9B;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMA,kBAAN,SAAiCf,gBAAjC,CAAkD;AACrDgB,EAAAA,WAAW,CAACC,UAAD,EAAaC,eAAb,EAA8B;AACrC;AACA,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACA;AACR;AACA;AACA;;AACQ,SAAKC,SAAL,GAAiB,KAAjB;AACA;AACR;AACA;AACA;;AACQ,SAAKC,mBAAL,GAA2B,MAAM,KAAKC,eAAL,EAAjC;AACA;AACR;AACA;AACA;;;AACQ,SAAKC,UAAL,GAAkB,EAAlB;AACA;AACR;AACA;AACA;;AACQ,SAAKC,IAAL,GAAY,IAAZ;AACA;AACR;AACA;AACA;;AACQ,SAAKC,QAAL,GAAgB,IAAI7B,YAAJ,EAAhB;;AACA,SAAK8B,cAAL,CAAoBR,UAApB;;AACA,SAAKS,mBAAL,CAAyBR,eAAzB;AACH;AACD;;;AACAS,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKC,iBAAL;;AACA,QAAID,OAAO,CAACE,cAAR,CAAuB,MAAvB,CAAJ,EAAoC;AAChC,WAAKC,iBAAL;;AACA,WAAKV,eAAL;;AACA,WAAKW,oBAAL;;AACA,WAAKC,QAAL,GAAgB,KAAKV,IAArB;AACH;AACJ;AACD;;;AACAW,EAAAA,WAAW,GAAG;AACV,QAAI,KAAKX,IAAT,EAAe;AACXnB,MAAAA,iBAAiB,CAAC,KAAKmB,IAAN,EAAY,IAAZ,CAAjB,CADW,CAEX;AACA;AACA;AACA;AACA;AACA;;AACA,UAAI,KAAKA,IAAL,CAAUH,mBAAV,KAAkC,KAAKA,mBAA3C,EAAgE;AAC5D,aAAKG,IAAL,CAAUY,2BAAV,CAAsC,MAAM,CAAG,CAA/C;AACH;AACJ;AACJ;AACD;AACJ;AACA;AACA;;;AACqB,MAAbC,aAAa,GAAG;AAChB,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACe,MAAPC,OAAO,GAAG;AACV,WAAO,KAAKd,IAAZ;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACY,MAAJe,IAAI,GAAG;AACP,WAAO,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,UAAU,CAACC,GAAD,EAAM;AACZ,UAAMC,IAAI,GAAG,KAAKlB,IAAL,CAAUmB,GAAV,CAAcF,GAAG,CAACF,IAAlB,CAAb;AACAhC,IAAAA,YAAY,CAACmC,IAAD,EAAOD,GAAP,CAAZ;AACAC,IAAAA,IAAI,CAACE,sBAAL,CAA4B;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAA5B;AACA,SAAKtB,UAAL,CAAgBuB,IAAhB,CAAqBL,GAArB;AACA,WAAOC,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIK,EAAAA,UAAU,CAACN,GAAD,EAAM;AACZ,WAAO,KAAKjB,IAAL,CAAUmB,GAAV,CAAcF,GAAG,CAACF,IAAlB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIS,EAAAA,aAAa,CAACP,GAAD,EAAM;AACftC,IAAAA,cAAc,CAACsC,GAAG,CAACH,OAAJ,IAAe,IAAhB,EAAsBG,GAAtB;AACd;AAAsC,SADxB,CAAd;AAEAnC,IAAAA,cAAc,CAAC,KAAKiB,UAAN,EAAkBkB,GAAlB,CAAd;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIQ,EAAAA,YAAY,CAACR,GAAD,EAAM;AACd,SAAKS,mBAAL,CAAyBT,GAAzB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIU,EAAAA,eAAe,CAACV,GAAD,EAAM;AACjB,SAAKW,qBAAL,CAA2BX,GAA3B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIY,EAAAA,YAAY,CAACZ,GAAD,EAAM;AACd,WAAO,KAAKjB,IAAL,CAAUmB,GAAV,CAAcF,GAAG,CAACF,IAAlB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIe,EAAAA,YAAY,CAACb,GAAD,EAAM;AACd,SAAKS,mBAAL,CAAyBT,GAAzB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIc,EAAAA,eAAe,CAACd,GAAD,EAAM;AACjB,SAAKW,qBAAL,CAA2BX,GAA3B;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIe,EAAAA,YAAY,CAACf,GAAD,EAAM;AACd,WAAO,KAAKjB,IAAL,CAAUmB,GAAV,CAAcF,GAAG,CAACF,IAAlB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIkB,EAAAA,WAAW,CAAChB,GAAD,EAAMiB,KAAN,EAAa;AACpB,UAAMhB,IAAI,GAAG,KAAKlB,IAAL,CAAUmB,GAAV,CAAcF,GAAG,CAACF,IAAlB,CAAb;AACAG,IAAAA,IAAI,CAACiB,QAAL,CAAcD,KAAd;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,QAAQ,CAACC,MAAD,EAAS;AACb,SAAKzC,SAAL,GAAiB,IAAjB;AACAV,IAAAA,mBAAmB,CAAC,KAAKc,IAAN,EAAY,KAAKD,UAAjB,CAAnB;AACA,SAAKE,QAAL,CAAcqC,IAAd,CAAmBD,MAAnB;AACA,WAAO,KAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIE,EAAAA,OAAO,GAAG;AACN,SAAKC,SAAL;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIA,EAAAA,SAAS,CAACN,KAAK,GAAGO,SAAT,EAAoB;AACzB,SAAKzC,IAAL,CAAU0C,KAAV,CAAgBR,KAAhB;AACA,SAAKtC,SAAL,GAAiB,KAAjB;AACH;AACD;;;AACAE,EAAAA,eAAe,GAAG;AACd,SAAKC,UAAL,CAAgB4C,OAAhB,CAAyB1B,GAAD,IAAS;AAC7B,YAAM2B,OAAO,GAAG3B,GAAG,CAACH,OAApB;AACA,YAAM+B,OAAO,GAAG,KAAK7C,IAAL,CAAUmB,GAAV,CAAcF,GAAG,CAACF,IAAlB,CAAhB;;AACA,UAAI6B,OAAO,KAAKC,OAAhB,EAAyB;AACrB;AACA;AACAlE,QAAAA,cAAc,CAACiE,OAAO,IAAI,IAAZ,EAAkB3B,GAAlB,CAAd,CAHqB,CAIrB;AACA;AACA;AACA;AACA;;AACA,YAAI4B,OAAO,YAAYvE,WAAvB,EAAoC;AAChCS,UAAAA,YAAY,CAAC8D,OAAD,EAAU5B,GAAV,CAAZ;AACAA,UAAAA,GAAG,CAACH,OAAJ,GAAc+B,OAAd;AACH;AACJ;AACJ,KAjBD;;AAkBA,SAAK7C,IAAL,CAAU8C,mBAAV,CAA8B;AAAEzB,MAAAA,SAAS,EAAE;AAAb,KAA9B;AACH;;AACDK,EAAAA,mBAAmB,CAACT,GAAD,EAAM;AACrB,UAAMC,IAAI,GAAG,KAAKlB,IAAL,CAAUmB,GAAV,CAAcF,GAAG,CAACF,IAAlB,CAAb;AACA/B,IAAAA,kBAAkB,CAACkC,IAAD,EAAOD,GAAP,CAAlB,CAFqB,CAGrB;AACA;AACA;;AACAC,IAAAA,IAAI,CAACE,sBAAL,CAA4B;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAA5B;AACH;;AACDO,EAAAA,qBAAqB,CAACX,GAAD,EAAM;AACvB,QAAI,KAAKjB,IAAT,EAAe;AACX,YAAMkB,IAAI,GAAG,KAAKlB,IAAL,CAAUmB,GAAV,CAAcF,GAAG,CAACF,IAAlB,CAAb;;AACA,UAAIG,IAAJ,EAAU;AACN,cAAM6B,gBAAgB,GAAGnE,oBAAoB,CAACsC,IAAD,EAAOD,GAAP,CAA7C;;AACA,YAAI8B,gBAAJ,EAAsB;AAClB;AACA;AACA7B,UAAAA,IAAI,CAACE,sBAAL,CAA4B;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAA5B;AACH;AACJ;AACJ;AACJ;;AACDZ,EAAAA,oBAAoB,GAAG;AACnB,SAAKT,IAAL,CAAUY,2BAAV,CAAsC,KAAKf,mBAA3C;;AACA,QAAI,KAAKa,QAAT,EAAmB;AACf,WAAKA,QAAL,CAAcE,2BAAd,CAA0C,MAAM,CAAG,CAAnD;AACH;AACJ;;AACDJ,EAAAA,iBAAiB,GAAG;AAChBvB,IAAAA,eAAe,CAAC,KAAKe,IAAN,EAAY,IAAZ,CAAf;;AACA,QAAI,KAAKU,QAAT,EAAmB;AACf7B,MAAAA,iBAAiB,CAAC,KAAK6B,QAAN,EAAgB,IAAhB,CAAjB;AACH;AACJ;;AACDJ,EAAAA,iBAAiB,GAAG;AAChB,QAAI,CAAC,KAAKN,IAAN,KAAe,OAAOZ,SAAP,KAAqB,WAArB,IAAoCA,SAAnD,CAAJ,EAAmE;AAC/D,YAAMV,oBAAoB,EAA1B;AACH;AACJ;;AAzQoD;;AA2QzDc,kBAAkB,CAACwD,IAAnB,GAA0B,SAASC,0BAAT,CAAoCC,CAApC,EAAuC;AAAE,SAAO,KAAKA,CAAC,IAAI1D,kBAAV,EAA8BL,EAAE,CAACgE,iBAAH,CAAqB3E,aAArB,EAAoC,EAApC,CAA9B,EAAuEW,EAAE,CAACgE,iBAAH,CAAqB5E,mBAArB,EAA0C,EAA1C,CAAvE,CAAP;AAA+H,CAAlM;;AACAiB,kBAAkB,CAAC4D,IAAnB,GAA0B,aAAcjE,EAAE,CAACkE,iBAAH,CAAqB;AAAEC,EAAAA,IAAI,EAAE9D,kBAAR;AAA4B+D,EAAAA,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,WAAL,EAAkB,EAAlB,CAAD,CAAvC;AAAgEC,EAAAA,YAAY,EAAE,SAASC,+BAAT,CAAyCC,EAAzC,EAA6CC,GAA7C,EAAkD;AAAE,QAAID,EAAE,GAAG,CAAT,EAAY;AACnMvE,MAAAA,EAAE,CAACyE,UAAH,CAAc,QAAd,EAAwB,SAASC,4CAAT,CAAsDxB,MAAtD,EAA8D;AAAE,eAAOsB,GAAG,CAACvB,QAAJ,CAAaC,MAAb,CAAP;AAA8B,OAAtH,EAAwH,OAAxH,EAAiI,SAASyB,2CAAT,GAAuD;AAAE,eAAOH,GAAG,CAACpB,OAAJ,EAAP;AAAuB,OAAjN;AACH;AAAE,GAFsD;AAEpDwB,EAAAA,MAAM,EAAE;AAAE/D,IAAAA,IAAI,EAAE,CAAC,WAAD,EAAc,MAAd;AAAR,GAF4C;AAEXgE,EAAAA,OAAO,EAAE;AAAE/D,IAAAA,QAAQ,EAAE;AAAZ,GAFE;AAEwBgE,EAAAA,QAAQ,EAAE,CAAC,QAAD,CAFlC;AAE8CC,EAAAA,QAAQ,EAAE,CAAC/E,EAAE,CAACgF,kBAAH,CAAsB,CAAC9E,qBAAD,CAAtB,CAAD,EAAiDF,EAAE,CAACiF,0BAApD,EAAgFjF,EAAE,CAACkF,oBAAnF;AAFxD,CAArB,CAAxC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { EventEmitter, forwardRef, } from '@angular/core';\nimport { FormControl } from '../../model';\nimport { NG_ASYNC_VALIDATORS, NG_VALIDATORS } from '../../validators';\nimport { ControlContainer } from '../control_container';\nimport { missingFormException } from '../reactive_errors';\nimport { cleanUpControl, cleanUpFormContainer, cleanUpValidators, removeListItem, setUpControl, setUpFormContainer, setUpValidators, syncPendingControls, } from '../shared';\nimport * as i0 from \"@angular/core\";\nconst ngDevMode = true;\nexport const formDirectiveProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => FormGroupDirective),\n};\n/**\n * @description\n *\n * Binds an existing `FormGroup` to a DOM element.\n *\n * This directive accepts an existing `FormGroup` instance. It will then use this\n * `FormGroup` instance to match any child `FormControl`, `FormGroup`,\n * and `FormArray` instances to child `FormControlName`, `FormGroupName`,\n * and `FormArrayName` directives.\n *\n * @see [Reactive Forms Guide](guide/reactive-forms)\n * @see `AbstractControl`\n *\n * @usageNotes\n * ### Register Form Group\n *\n * The following example registers a `FormGroup` with first name and last name controls,\n * and listens for the *ngSubmit* event when the button is clicked.\n *\n * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n *\n * @ngModule ReactiveFormsModule\n * @publicApi\n */\nexport class FormGroupDirective extends ControlContainer {\n    constructor(validators, asyncValidators) {\n        super();\n        this.validators = validators;\n        this.asyncValidators = asyncValidators;\n        /**\n         * @description\n         * Reports whether the form submission has been triggered.\n         */\n        this.submitted = false;\n        /**\n         * Callback that should be invoked when controls in FormGroup or FormArray collection change\n         * (added or removed). This callback triggers corresponding DOM updates.\n         */\n        this._onCollectionChange = () => this._updateDomValue();\n        /**\n         * @description\n         * Tracks the list of added `FormControlName` instances\n         */\n        this.directives = [];\n        /**\n         * @description\n         * Tracks the `FormGroup` bound to this directive.\n         */\n        this.form = null;\n        /**\n         * @description\n         * Emits an event when the form submission has been triggered.\n         */\n        this.ngSubmit = new EventEmitter();\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /** @nodoc */\n    ngOnChanges(changes) {\n        this._checkFormPresent();\n        if (changes.hasOwnProperty('form')) {\n            this._updateValidators();\n            this._updateDomValue();\n            this._updateRegistrations();\n            this._oldForm = this.form;\n        }\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        if (this.form) {\n            cleanUpValidators(this.form, this);\n            // Currently the `onCollectionChange` callback is rewritten each time the\n            // `_registerOnCollectionChange` function is invoked. The implication is that cleanup should\n            // happen *only* when the `onCollectionChange` callback was set by this directive instance.\n            // Otherwise it might cause overriding a callback of some other directive instances. We should\n            // consider updating this logic later to make it similar to how `onChange` callbacks are\n            // handled, see https://github.com/angular/angular/issues/39732 for additional info.\n            if (this.form._onCollectionChange === this._onCollectionChange) {\n                this.form._registerOnCollectionChange(() => { });\n            }\n        }\n    }\n    /**\n     * @description\n     * Returns this directive's instance.\n     */\n    get formDirective() {\n        return this;\n    }\n    /**\n     * @description\n     * Returns the `FormGroup` bound to this directive.\n     */\n    get control() {\n        return this.form;\n    }\n    /**\n     * @description\n     * Returns an array representing the path to this group. Because this directive\n     * always lives at the top level of a form, it always an empty array.\n     */\n    get path() {\n        return [];\n    }\n    /**\n     * @description\n     * Method that sets up the control directive in this group, re-calculates its value\n     * and validity, and adds the instance to the internal list of directives.\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    addControl(dir) {\n        const ctrl = this.form.get(dir.path);\n        setUpControl(ctrl, dir);\n        ctrl.updateValueAndValidity({ emitEvent: false });\n        this.directives.push(dir);\n        return ctrl;\n    }\n    /**\n     * @description\n     * Retrieves the `FormControl` instance from the provided `FormControlName` directive\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    getControl(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * @description\n     * Removes the `FormControlName` instance from the internal list of directives\n     *\n     * @param dir The `FormControlName` directive instance.\n     */\n    removeControl(dir) {\n        cleanUpControl(dir.control || null, dir, \n        /* validateControlPresenceOnChange */ false);\n        removeListItem(this.directives, dir);\n    }\n    /**\n     * Adds a new `FormGroupName` directive instance to the form.\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    addFormGroup(dir) {\n        this._setUpFormContainer(dir);\n    }\n    /**\n     * Performs the necessary cleanup when a `FormGroupName` directive instance is removed from the\n     * view.\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    removeFormGroup(dir) {\n        this._cleanUpFormContainer(dir);\n    }\n    /**\n     * @description\n     * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance\n     *\n     * @param dir The `FormGroupName` directive instance.\n     */\n    getFormGroup(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * Performs the necessary setup when a `FormArrayName` directive instance is added to the view.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    addFormArray(dir) {\n        this._setUpFormContainer(dir);\n    }\n    /**\n     * Performs the necessary cleanup when a `FormArrayName` directive instance is removed from the\n     * view.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    removeFormArray(dir) {\n        this._cleanUpFormContainer(dir);\n    }\n    /**\n     * @description\n     * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.\n     *\n     * @param dir The `FormArrayName` directive instance.\n     */\n    getFormArray(dir) {\n        return this.form.get(dir.path);\n    }\n    /**\n     * Sets the new value for the provided `FormControlName` directive.\n     *\n     * @param dir The `FormControlName` directive instance.\n     * @param value The new value for the directive's control.\n     */\n    updateModel(dir, value) {\n        const ctrl = this.form.get(dir.path);\n        ctrl.setValue(value);\n    }\n    /**\n     * @description\n     * Method called with the \"submit\" event is triggered on the form.\n     * Triggers the `ngSubmit` emitter to emit the \"submit\" event as its payload.\n     *\n     * @param $event The \"submit\" event object\n     */\n    onSubmit($event) {\n        this.submitted = true;\n        syncPendingControls(this.form, this.directives);\n        this.ngSubmit.emit($event);\n        return false;\n    }\n    /**\n     * @description\n     * Method called when the \"reset\" event is triggered on the form.\n     */\n    onReset() {\n        this.resetForm();\n    }\n    /**\n     * @description\n     * Resets the form to an initial value and resets its submitted status.\n     *\n     * @param value The new value for the form.\n     */\n    resetForm(value = undefined) {\n        this.form.reset(value);\n        this.submitted = false;\n    }\n    /** @internal */\n    _updateDomValue() {\n        this.directives.forEach((dir) => {\n            const oldCtrl = dir.control;\n            const newCtrl = this.form.get(dir.path);\n            if (oldCtrl !== newCtrl) {\n                // Note: the value of the `dir.control` may not be defined, for example when it's a first\n                // `FormControl` that is added to a `FormGroup` instance (via `addControl` call).\n                cleanUpControl(oldCtrl || null, dir);\n                // Check whether new control at the same location inside the corresponding `FormGroup` is an\n                // instance of `FormControl` and perform control setup only if that's the case.\n                // Note: we don't need to clear the list of directives (`this.directives`) here, it would be\n                // taken care of in the `removeControl` method invoked when corresponding `formControlName`\n                // directive instance is being removed (invoked from `FormControlName.ngOnDestroy`).\n                if (newCtrl instanceof FormControl) {\n                    setUpControl(newCtrl, dir);\n                    dir.control = newCtrl;\n                }\n            }\n        });\n        this.form._updateTreeValidity({ emitEvent: false });\n    }\n    _setUpFormContainer(dir) {\n        const ctrl = this.form.get(dir.path);\n        setUpFormContainer(ctrl, dir);\n        // NOTE: this operation looks unnecessary in case no new validators were added in\n        // `setUpFormContainer` call. Consider updating this code to match the logic in\n        // `_cleanUpFormContainer` function.\n        ctrl.updateValueAndValidity({ emitEvent: false });\n    }\n    _cleanUpFormContainer(dir) {\n        if (this.form) {\n            const ctrl = this.form.get(dir.path);\n            if (ctrl) {\n                const isControlUpdated = cleanUpFormContainer(ctrl, dir);\n                if (isControlUpdated) {\n                    // Run validity check only in case a control was updated (i.e. view validators were\n                    // removed) as removing view validators might cause validity to change.\n                    ctrl.updateValueAndValidity({ emitEvent: false });\n                }\n            }\n        }\n    }\n    _updateRegistrations() {\n        this.form._registerOnCollectionChange(this._onCollectionChange);\n        if (this._oldForm) {\n            this._oldForm._registerOnCollectionChange(() => { });\n        }\n    }\n    _updateValidators() {\n        setUpValidators(this.form, this);\n        if (this._oldForm) {\n            cleanUpValidators(this._oldForm, this);\n        }\n    }\n    _checkFormPresent() {\n        if (!this.form && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw missingFormException();\n        }\n    }\n}\nFormGroupDirective.ɵfac = function FormGroupDirective_Factory(t) { return new (t || FormGroupDirective)(i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10)); };\nFormGroupDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: FormGroupDirective, selectors: [[\"\", \"formGroup\", \"\"]], hostBindings: function FormGroupDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        i0.ɵɵlistener(\"submit\", function FormGroupDirective_submit_HostBindingHandler($event) { return ctx.onSubmit($event); })(\"reset\", function FormGroupDirective_reset_HostBindingHandler() { return ctx.onReset(); });\n    } }, inputs: { form: [\"formGroup\", \"form\"] }, outputs: { ngSubmit: \"ngSubmit\" }, exportAs: [\"ngForm\"], features: [i0.ɵɵProvidersFeature([formDirectiveProvider]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature] });\n"]},"metadata":{},"sourceType":"module"}