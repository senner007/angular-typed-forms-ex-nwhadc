{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { forwardRef } from '@angular/core';\nimport { NG_ASYNC_VALIDATORS, NG_VALIDATORS } from '../validators';\nimport { AbstractFormGroupDirective } from './abstract_form_group_directive';\nimport { ControlContainer } from './control_container';\nimport { NgForm } from './ng_form';\nimport { modelGroupParentException } from './template_driven_errors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./control_container\";\nconst ngDevMode = true;\nexport const modelGroupProvider = {\n  provide: ControlContainer,\n  useExisting: forwardRef(() => NgModelGroup)\n};\n/**\n * @description\n * Creates and binds a `FormGroup` instance to a DOM element.\n *\n * This directive can only be used as a child of `NgForm` (within `<form>` tags).\n *\n * Use this directive to validate a sub-group of your form separately from the\n * rest of your form, or if some values in your domain model make more sense\n * to consume together in a nested object.\n *\n * Provide a name for the sub-group and it will become the key\n * for the sub-group in the form's full value. If you need direct access, export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * @usageNotes\n *\n * ### Consuming controls in a grouping\n *\n * The following example shows you how to combine controls together in a sub-group\n * of the form.\n *\n * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * @ngModule FormsModule\n * @publicApi\n */\n\nexport class NgModelGroup extends AbstractFormGroupDirective {\n  constructor(parent, validators, asyncValidators) {\n    super();\n    this._parent = parent;\n\n    this._setValidators(validators);\n\n    this._setAsyncValidators(asyncValidators);\n  }\n  /** @internal */\n\n\n  _checkParentType() {\n    if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw modelGroupParentException();\n    }\n  }\n\n}\n\nNgModelGroup.ɵfac = function NgModelGroup_Factory(t) {\n  return new (t || NgModelGroup)(i0.ɵɵdirectiveInject(i1.ControlContainer, 5), i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10));\n};\n\nNgModelGroup.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: NgModelGroup,\n  selectors: [[\"\", \"ngModelGroup\", \"\"]],\n  inputs: {\n    name: [\"ngModelGroup\", \"name\"]\n  },\n  exportAs: [\"ngModelGroup\"],\n  features: [i0.ɵɵProvidersFeature([modelGroupProvider]), i0.ɵɵInheritDefinitionFeature]\n});","map":{"version":3,"sources":["/home/nig/angular-typed-forms-ex-nwhadc/src/forms/src/directives/ng_model_group.ts"],"names":["forwardRef","NG_ASYNC_VALIDATORS","NG_VALIDATORS","AbstractFormGroupDirective","ControlContainer","NgForm","modelGroupParentException","i0","i1","ngDevMode","modelGroupProvider","provide","useExisting","NgModelGroup","constructor","parent","validators","asyncValidators","_parent","_setValidators","_setAsyncValidators","_checkParentType","ɵfac","NgModelGroup_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","inputs","name","exportAs","features","ɵɵProvidersFeature","ɵɵInheritDefinitionFeature"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAT,QAA4B,eAA5B;AACA,SAASC,mBAAT,EAA8BC,aAA9B,QAAmD,eAAnD;AACA,SAASC,0BAAT,QAA2C,iCAA3C;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,yBAAT,QAA0C,0BAA1C;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,qBAApB;AACA,MAAMC,SAAS,GAAG,IAAlB;AACA,OAAO,MAAMC,kBAAkB,GAAG;AAC9BC,EAAAA,OAAO,EAAEP,gBADqB;AAE9BQ,EAAAA,WAAW,EAAEZ,UAAU,CAAC,MAAMa,YAAP;AAFO,CAA3B;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMA,YAAN,SAA2BV,0BAA3B,CAAsD;AACzDW,EAAAA,WAAW,CAACC,MAAD,EAASC,UAAT,EAAqBC,eAArB,EAAsC;AAC7C;AACA,SAAKC,OAAL,GAAeH,MAAf;;AACA,SAAKI,cAAL,CAAoBH,UAApB;;AACA,SAAKI,mBAAL,CAAyBH,eAAzB;AACH;AACD;;;AACAI,EAAAA,gBAAgB,GAAG;AACf,QAAI,EAAE,KAAKH,OAAL,YAAwBL,YAA1B,KACA,EAAE,KAAKK,OAAL,YAAwBb,MAA1B,CADA,KAEC,OAAOI,SAAP,KAAqB,WAArB,IAAoCA,SAFrC,CAAJ,EAEqD;AACjD,YAAMH,yBAAyB,EAA/B;AACH;AACJ;;AAdwD;;AAgB7DO,YAAY,CAACS,IAAb,GAAoB,SAASC,oBAAT,CAA8BC,CAA9B,EAAiC;AAAE,SAAO,KAAKA,CAAC,IAAIX,YAAV,EAAwBN,EAAE,CAACkB,iBAAH,CAAqBjB,EAAE,CAACJ,gBAAxB,EAA0C,CAA1C,CAAxB,EAAsEG,EAAE,CAACkB,iBAAH,CAAqBvB,aAArB,EAAoC,EAApC,CAAtE,EAA+GK,EAAE,CAACkB,iBAAH,CAAqBxB,mBAArB,EAA0C,EAA1C,CAA/G,CAAP;AAAuK,CAA9N;;AACAY,YAAY,CAACa,IAAb,GAAoB,aAAcnB,EAAE,CAACoB,iBAAH,CAAqB;AAAEC,EAAAA,IAAI,EAAEf,YAAR;AAAsBgB,EAAAA,SAAS,EAAE,CAAC,CAAC,EAAD,EAAK,cAAL,EAAqB,EAArB,CAAD,CAAjC;AAA6DC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,IAAI,EAAE,CAAC,cAAD,EAAiB,MAAjB;AAAR,GAArE;AAAyGC,EAAAA,QAAQ,EAAE,CAAC,cAAD,CAAnH;AAAqIC,EAAAA,QAAQ,EAAE,CAAC1B,EAAE,CAAC2B,kBAAH,CAAsB,CAACxB,kBAAD,CAAtB,CAAD,EAA8CH,EAAE,CAAC4B,0BAAjD;AAA/I,CAArB,CAAlC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { forwardRef, } from '@angular/core';\nimport { NG_ASYNC_VALIDATORS, NG_VALIDATORS } from '../validators';\nimport { AbstractFormGroupDirective } from './abstract_form_group_directive';\nimport { ControlContainer } from './control_container';\nimport { NgForm } from './ng_form';\nimport { modelGroupParentException } from './template_driven_errors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./control_container\";\nconst ngDevMode = true;\nexport const modelGroupProvider = {\n    provide: ControlContainer,\n    useExisting: forwardRef(() => NgModelGroup),\n};\n/**\n * @description\n * Creates and binds a `FormGroup` instance to a DOM element.\n *\n * This directive can only be used as a child of `NgForm` (within `<form>` tags).\n *\n * Use this directive to validate a sub-group of your form separately from the\n * rest of your form, or if some values in your domain model make more sense\n * to consume together in a nested object.\n *\n * Provide a name for the sub-group and it will become the key\n * for the sub-group in the form's full value. If you need direct access, export the directive into\n * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n *\n * @usageNotes\n *\n * ### Consuming controls in a grouping\n *\n * The following example shows you how to combine controls together in a sub-group\n * of the form.\n *\n * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n *\n * @ngModule FormsModule\n * @publicApi\n */\nexport class NgModelGroup extends AbstractFormGroupDirective {\n    constructor(parent, validators, asyncValidators) {\n        super();\n        this._parent = parent;\n        this._setValidators(validators);\n        this._setAsyncValidators(asyncValidators);\n    }\n    /** @internal */\n    _checkParentType() {\n        if (!(this._parent instanceof NgModelGroup) &&\n            !(this._parent instanceof NgForm) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw modelGroupParentException();\n        }\n    }\n}\nNgModelGroup.ɵfac = function NgModelGroup_Factory(t) { return new (t || NgModelGroup)(i0.ɵɵdirectiveInject(i1.ControlContainer, 5), i0.ɵɵdirectiveInject(NG_VALIDATORS, 10), i0.ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10)); };\nNgModelGroup.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: NgModelGroup, selectors: [[\"\", \"ngModelGroup\", \"\"]], inputs: { name: [\"ngModelGroup\", \"name\"] }, exportAs: [\"ngModelGroup\"], features: [i0.ɵɵProvidersFeature([modelGroupProvider]), i0.ɵɵInheritDefinitionFeature] });\n"]},"metadata":{},"sourceType":"module"}